{"version":3,"sources":["../../../src/components/VProgressCircular/VProgressCircular.tsx"],"names":["makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useIntersectionObserver","useTextColor","useResizeObserver","computed","ref","toRef","watchEffect","convertToUnit","defineComponent","VProgressCircular","name","props","bgColor","String","color","indeterminate","Boolean","modelValue","type","Number","default","rotate","width","tag","setup","slots","MAGIC_RADIUS_CONSTANT","CIRCUMFERENCE","Math","PI","root","themeClasses","sizeClasses","sizeStyles","textColorClasses","textColorStyles","underlayColorClasses","underlayColorStyles","intersectionRef","isIntersecting","resizeRef","contentRect","normalizedValue","max","min","parseFloat","size","value","diameter","strokeWidth","strokeDashOffset","undefined","transform"],"mappings":"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","sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Composables\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useTextColor } from '@/composables/color'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, ref, toRef, watchEffect } from 'vue'\nimport { convertToUnit, defineComponent } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VProgressCircular = defineComponent({\n  name: 'VProgressCircular',\n\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String] as PropType<boolean | 'disable-shrink'>,\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'div' }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const MAGIC_RADIUS_CONSTANT = 20\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT\n\n    const root = ref<HTMLElement>()\n\n    const { themeClasses } = provideTheme(props)\n    const { sizeClasses, sizeStyles } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const { textColorClasses: underlayColorClasses, textColorStyles: underlayColorStyles } = useTextColor(toRef(props, 'bgColor'))\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n    const { resizeRef, contentRect } = useResizeObserver()\n\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))))\n    const width = computed(() => Number(props.width))\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value\n        ? Number(props.size)\n        : contentRect.value\n          ? contentRect.value.width\n          : Math.max(width.value, 32)\n    })\n    const diameter = computed(() => (MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value)) * 2)\n    const strokeWidth = computed(() => width.value / size.value * diameter.value)\n    const strokeDashOffset = computed(() => convertToUnit(((100 - normalizedValue.value) / 100) * CIRCUMFERENCE))\n\n    watchEffect(() => {\n      intersectionRef.value = root.value\n      resizeRef.value = root.value\n    })\n\n    return () => (\n      <props.tag\n        ref={ root }\n        class={[\n          'v-progress-circular',\n          {\n            'v-progress-circular--indeterminate': !!props.indeterminate,\n            'v-progress-circular--visible': isIntersecting.value,\n            'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink',\n          },\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          sizeStyles.value,\n          textColorStyles.value,\n        ]}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n      >\n        <svg\n          style={{\n            transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`,\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={ `0 0 ${diameter.value} ${diameter.value}` }\n        >\n          <circle\n            class={[\n              'v-progress-circular__underlay',\n              underlayColorClasses.value,\n            ]}\n            style={ underlayColorStyles.value }\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ 0 }\n          />\n\n          <circle\n            class=\"v-progress-circular__overlay\"\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ strokeDashOffset.value }\n          />\n        </svg>\n        { slots.default && (\n          <div class=\"v-progress-circular__content\">\n            { slots.default({ value: normalizedValue.value }) }\n          </div>\n        ) }\n      </props.tag>\n    )\n  },\n})\n"],"file":"VProgressCircular.mjs"}