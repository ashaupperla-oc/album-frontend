{"version":3,"sources":["../../../src/components/VList/list.ts"],"names":["computed","inject","provide","ref","DepthKey","Symbol","for","useDepth","hasPrepend","parent","depth","value","ListKey","createList","updateHasPrepend","data","useList"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,QAA+C,KAA/C,C,CAEA;;AAGA;AACA,OAAO,MAAMC,QAAmC,GAAGC,MAAM,CAACC,GAAP,CAAW,eAAX,CAA5C;AAEP,OAAO,SAASC,QAAT,CAAmBC,UAAnB,EAA8C;AACnD,QAAMC,MAAM,GAAGR,MAAM,CAACG,QAAD,EAAWD,GAAG,CAAC,CAAC,CAAF,CAAd,CAArB;AAEA,QAAMO,KAAK,GAAGV,QAAQ,CAAC,MAAMS,MAAM,CAACE,KAAP,GAAe,CAAf,IAAoBH,UAAU,QAAV,IAAAA,UAAU,CAAEG,KAAZ,GAAoB,CAApB,GAAwB,CAA5C,CAAP,CAAtB;AAEAT,EAAAA,OAAO,CAACE,QAAD,EAAWM,KAAX,CAAP;AAEA,SAAOA,KAAP;AACD,C,CAED;;AACA,OAAO,MAAME,OAGX,GAAGP,MAAM,CAACC,GAAP,CAAW,cAAX,CAHE;AAKP,OAAO,SAASO,UAAT,GAAuB;AAC5B,QAAMJ,MAAM,GAAGR,MAAM,CAACW,OAAD,EAAU;AAAEJ,IAAAA,UAAU,EAAEL,GAAG,CAAC,KAAD,CAAjB;AAA0BW,IAAAA,gBAAgB,EAAE,MAAM;AAAlD,GAAV,CAArB;AAEA,QAAMC,IAAI,GAAG;AACXP,IAAAA,UAAU,EAAEL,GAAG,CAAC,KAAD,CADJ;AAEXW,IAAAA,gBAAgB,EAAGH,KAAD,IAAoB;AACpC,UAAIA,KAAJ,EAAWI,IAAI,CAACP,UAAL,CAAgBG,KAAhB,GAAwBA,KAAxB;AACZ;AAJU,GAAb;AAOAT,EAAAA,OAAO,CAACU,OAAD,EAAUG,IAAV,CAAP;AAEA,SAAON,MAAP;AACD;AAED,OAAO,SAASO,OAAT,GAAoB;AACzB,SAAOf,MAAM,CAACW,OAAD,EAAU,IAAV,CAAb;AACD","sourcesContent":["// Utilities\nimport { computed, inject, provide, ref } from 'vue'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\n\n// Depth\nexport const DepthKey: InjectionKey<Ref<number>> = Symbol.for('vuetify:depth')\n\nexport function useDepth (hasPrepend?: Ref<boolean>) {\n  const parent = inject(DepthKey, ref(-1))\n\n  const depth = computed(() => parent.value + 1 + (hasPrepend?.value ? 1 : 0))\n\n  provide(DepthKey, depth)\n\n  return depth\n}\n\n// List\nexport const ListKey: InjectionKey<{\n  hasPrepend: Ref<boolean>\n  updateHasPrepend: (value: boolean) => void\n}> = Symbol.for('vuetify:list')\n\nexport function createList () {\n  const parent = inject(ListKey, { hasPrepend: ref(false), updateHasPrepend: () => null })\n\n  const data = {\n    hasPrepend: ref(false),\n    updateHasPrepend: (value: boolean) => {\n      if (value) data.hasPrepend.value = value\n    },\n  }\n\n  provide(ListKey, data)\n\n  return parent\n}\n\nexport function useList () {\n  return inject(ListKey, null)\n}\n"],"file":"list.mjs"}