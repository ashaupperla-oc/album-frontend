{"version":3,"sources":["../../../src/components/VList/VListGroup.tsx"],"names":["VDefaultsProvider","VExpandTransition","useList","makeTagProps","useNestedGroupActivator","useNestedItem","computed","toRef","defineComponent","genericComponent","VListGroupActivator","name","setup","_","slots","default","VListGroup","props","activeColor","String","color","collapseIcon","type","expandIcon","value","isOpen","open","list","onClick","e","activatorProps","active","appendIcon","class","undefined","hasPrepend","activator","VListItemIcon"],"mappings":";AAAA;SACSA,iB;SACAC,iB,oCAET;;SACSC,O;SACAC,Y;SACAC,uB,EAAyBC,a,+CAElC;;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,e,EAAiBC,gB,gCAE1B;;AAcA,MAAMC,mBAAmB,GAAGF,eAAe,CAAC;AAC1CG,EAAAA,IAAI,EAAE,qBADoC;;AAG1CC,EAAAA,KAAK,CAAEC,CAAF,QAAgB;AAAA,QAAX;AAAEC,MAAAA;AAAF,KAAW;AACnBV,IAAAA,uBAAuB;AAEvB,WAAO;AAAA;;AAAA,+BAAMU,KAAK,CAACC,OAAZ,qBAAM,oBAAAD,KAAK,CAAX;AAAA,KAAP;AACD;;AAPyC,CAAD,CAA3C;AAUA,OAAO,MAAME,UAAU,GAAGP,gBAAgB,GAQrC;AACHE,EAAAA,IAAI,EAAE,YADH;AAGHM,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAEC,MADR;AAELC,IAAAA,KAAK,EAAED,MAFF;AAGLE,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAEH,MADM;AAEZJ,MAAAA,OAAO,EAAE;AAFG,KAHT;AAOLQ,IAAAA,UAAU,EAAE;AACVD,MAAAA,IAAI,EAAEH,MADI;AAEVJ,MAAAA,OAAO,EAAE;AAFC,KAPP;AAWLS,IAAAA,KAAK,EAAE,IAXF;AAaL,OAAGrB,YAAY;AAbV,GAHJ;;AAmBHS,EAAAA,KAAK,CAAEK,KAAF,SAAoB;AAAA,QAAX;AAAEH,MAAAA;AAAF,KAAW;AACvB,UAAM;AAAEW,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAmBrB,aAAa,CAACE,KAAK,CAACU,KAAD,EAAQ,OAAR,CAAN,EAAwB,IAAxB,CAAtC;AACA,UAAMU,IAAI,GAAGzB,OAAO,EAApB;;AAEA,UAAM0B,OAAO,GAAIC,CAAD,IAAc;AAC5BH,MAAAA,IAAI,CAAC,CAACD,MAAM,CAACD,KAAT,EAAgBK,CAAhB,CAAJ;AACD,KAFD;;AAIA,UAAMC,cAAoD,GAAGxB,QAAQ,CAAC;AAAA;;AAAA,aAAO;AAC3EsB,QAAAA,OAD2E;AAE3EG,QAAAA,MAAM,EAAEN,MAAM,CAACD,KAF4D;AAG3EQ,QAAAA,UAAU,EAAEP,MAAM,CAACD,KAAP,GAAeP,KAAK,CAACI,YAArB,GAAoCJ,KAAK,CAACM,UAHqB;AAI3EU,QAAAA,KAAK,EAAE,sBAJoE;AAK3Eb,QAAAA,KAAK,EAAEK,MAAM,CAACD,KAAP,yBAAeP,KAAK,CAACC,WAArB,iCAAoCD,KAAK,CAACG,KAA1C,GAAkDc;AALkB,OAAP;AAAA,KAAD,CAArE;AAQA,WAAO,MAAM;AAAA;;AACX;AAAA,iBAEW,CACL,cADK,EAEL;AACE,mCAAyBP,IAAzB,oBAAyBA,IAAI,CAAEQ,UAAN,CAAiBX;AAD5C,SAFK;AAFX;AAAA,wBASMV,KAAK,CAACsB,SAAN;AAAA,sBAEY;AACRC,YAAAA,aAAa,EAAE;AAAEjB,cAAAA,KAAK,EAAEU,cAAc,CAACN,KAAf,CAAqBJ;AAA9B;AADP;AAFZ;AAAA;AAAA,4BAOMN,KAAK,CAACsB,SAAN,CAAgB;AAAEnB,cAAAA,KAAK,EAAEa,cAAc,CAACN,KAAxB;AAA+BC,cAAAA;AAA/B,aAAhB,CAPN;AAAA;AAAA,UATN;AAAA;AAAA,qBAqBiB;AArBjB,iCAsBUX,KAAK,CAACC,OAtBhB,qBAsBU,qBAAAD,KAAK,CAtBf,cAqB+CW,MAAM,CAACD,KArBtD;AAAA;AAAA;AA2BD,KA5BD;AA6BD;;AAhEE,CARqC,CAAnC","sourcesContent":["// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { useList } from './list'\nimport { makeTagProps } from '@/composables/tag'\nimport { useNestedGroupActivator, useNestedItem } from '@/composables/nested/nested'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, genericComponent } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { InternalListItem } from './VList'\n\nexport type ListGroupActivatorSlot = {\n  props: {\n    onClick: (e: Event) => void\n    appendIcon: string\n    class: string\n    color?: string\n  }\n}\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup (_, { slots }) {\n    useNestedGroupActivator()\n\n    return () => slots.default?.()\n  },\n})\n\nexport const VListGroup = genericComponent<new <T extends InternalListItem>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    activator: [ListGroupActivatorSlot]\n    default: []\n  }>\n}>()({\n  name: 'VListGroup',\n\n  props: {\n    activeColor: String,\n    color: String,\n    collapseIcon: {\n      type: String,\n      default: '$collapse',\n    },\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    value: null,\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    const { isOpen, open } = useNestedItem(toRef(props, 'value'), true)\n    const list = useList()\n\n    const onClick = (e: Event) => {\n      open(!isOpen.value, e)\n    }\n\n    const activatorProps: Ref<ListGroupActivatorSlot['props']> = computed(() => ({\n      onClick,\n      active: isOpen.value,\n      appendIcon: isOpen.value ? props.collapseIcon : props.expandIcon,\n      class: 'v-list-group__header',\n      color: isOpen.value ? props.activeColor ?? props.color : undefined,\n    }))\n\n    return () => {\n      return (\n        <props.tag\n          class={[\n            'v-list-group',\n            {\n              'v-list-group--prepend': list?.hasPrepend.value,\n            },\n          ]}\n        >\n          { slots.activator && (\n            <VDefaultsProvider\n              defaults={{\n                VListItemIcon: { color: activatorProps.value.color },\n              }}\n            >\n              <VListGroupActivator>\n                { slots.activator({ props: activatorProps.value, isOpen }) }\n              </VListGroupActivator>\n            </VDefaultsProvider>\n          ) }\n          <VExpandTransition>\n            <div class=\"v-list-group__items\" v-show={isOpen.value}>\n              { slots.default?.() }\n            </div>\n          </VExpandTransition>\n        </props.tag>\n      )\n    }\n  },\n})\n"],"file":"VListGroup.mjs"}