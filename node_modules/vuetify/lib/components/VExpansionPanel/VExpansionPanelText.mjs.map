{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelText.tsx"],"names":["VExpandTransition","VExpansionPanelSymbol","makeLazyProps","useLazy","defineComponent","useRender","inject","VExpansionPanelText","name","props","setup","slots","expansionPanel","Error","hasContent","onAfterLeave","isSelected","default","value"],"mappings":";AAAA;SACSA,iB;SACAC,qB,kCAET;;SACSC,a,EAAeC,O,sCAExB;;SACSC,e,EAAiBC,S;AAC1B,SAASC,MAAT,QAAuB,KAAvB;AAEA,OAAO,MAAMC,mBAAmB,GAAGH,eAAe,CAAC;AACjDI,EAAAA,IAAI,EAAE,qBAD2C;AAGjDC,EAAAA,KAAK,EAAE,EACL,GAAGP,aAAa;AADX,GAH0C;;AAOjDQ,EAAAA,KAAK,CAAED,KAAF,QAAoB;AAAA,QAAX;AAAEE,MAAAA;AAAF,KAAW;AACvB,UAAMC,cAAc,GAAGN,MAAM,CAACL,qBAAD,CAA7B;AAEA,QAAI,CAACW,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AAErB,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA+BZ,OAAO,CAACM,KAAD,EAAQG,cAAc,CAACI,UAAvB,CAA5C;AAEAX,IAAAA,SAAS,CAAC;AAAA;;AAAA;AAAA,wBAC0BU;AAD1B;AAAA;AAAA,mBAGE;AAHF,YAMFJ,KAAK,CAACM,OAAN,IAAiBH,UAAU,CAACI,KAA5B;AAAA,mBACW;AADX,8BAEIP,KAAK,CAACM,OAFV,qBAEI,oBAAAN,KAAK,CAFT,EANE,cAIKC,cAAc,CAACI,UAAf,CAA0BE,KAJ/B;AAAA;AAAA,KAAD,CAAT;AAeA,WAAO,EAAP;AACD;;AA9BgD,CAAD,CAA3C","sourcesContent":["// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { defineComponent, useRender } from '@/util'\nimport { inject } from 'vue'\n\nexport const VExpansionPanelText = defineComponent({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          ) }\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n"],"file":"VExpansionPanelText.mjs"}