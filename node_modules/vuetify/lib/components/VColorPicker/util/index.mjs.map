{"version":3,"sources":["../../../../src/components/VColorPicker/util/index.ts"],"names":["HexToHSVA","HSLAtoHSVA","HSVAtoHex","HSVAtoHSLA","HSVAtoRGBA","parseHex","RGBAtoHSVA","has","obj","key","every","k","hasOwnProperty","parseColor","color","hsva","hex","a","stripAlpha","rest","extractColor","input","slice","converted","hasAlpha","length","nullColor","h","s","v","rgba","inputProps","type","min","inputs","label","max","step","getValue","c","Math","round","r","getColor","Number","g","b","to","from","rgb","hsla","l","hsl","hexa","modes"],"mappings":";;AAAA;SAEEA,S,EACAC,U,EACAC,S,EACAC,U,EACAC,U,EACAC,Q,EACAC,U,wCAGF;;AAOA,SAASC,GAAT,CAAcC,GAAd,EAA2BC,GAA3B,EAA0C;AACxC,SAAOA,GAAG,CAACC,KAAJ,CAAUC,CAAC,IAAIH,GAAG,CAACI,cAAJ,CAAmBD,CAAnB,CAAf,CAAP;AACD;;AAED,OAAO,SAASE,UAAT,CAAqBC,KAArB,EAA8C;AAAA;;AACnD,MAAI,CAACA,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAIC,IAAiB,GAAG,IAAxB;;AAEA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAME,GAAG,GAAGX,QAAQ,CAACS,KAAD,CAApB;AAEAC,IAAAA,IAAI,GAAGf,SAAS,CAACgB,GAAD,CAAhB;AACD;;AAED,MAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIP,GAAG,CAACO,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiC;AAC/BC,MAAAA,IAAI,GAAGT,UAAU,CAACQ,KAAD,CAAjB;AACD,KAFD,MAEO,IAAIP,GAAG,CAACO,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiC;AACtCC,MAAAA,IAAI,GAAGd,UAAU,CAACa,KAAD,CAAjB;AACD,KAFM,MAEA,IAAIP,GAAG,CAACO,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiC;AACtCC,MAAAA,IAAI,GAAGD,KAAP;AACD;AACF;;AAED,SAAOC,IAAI,IAAI,IAAR,GAAe,EAAE,GAAGA,IAAL;AAAWE,IAAAA,CAAC,aAAEF,IAAI,CAACE,CAAP,sBAAY;AAAxB,GAAf,GAA6C,IAApD;AACD;;AAED,SAASC,UAAT,CAAqBJ,KAArB,EAAiCI,UAAjC,EAAsD;AACpD,MAAIA,UAAJ,EAAgB;AACd,UAAM;AAAED,MAAAA,CAAF;AAAK,SAAGE;AAAR,QAAiBL,KAAvB;AAEA,WAAOK,IAAP;AACD;;AAED,SAAOL,KAAP;AACD;;AAED,OAAO,SAASM,YAAT,CAAuBN,KAAvB,EAAoCO,KAApC,EAAgD;AACrD,MAAIA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;AAC9C,UAAML,GAAG,GAAGd,SAAS,CAACY,KAAD,CAArB;AAEA,QAAIA,KAAK,CAACG,CAAN,KAAY,CAAhB,EAAmB,OAAOD,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAP,CAAnB,KACK,OAAON,GAAP;AACN;;AAED,MAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAIE,SAAJ;AAEA,QAAIhB,GAAG,CAACc,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiCE,SAAS,GAAGnB,UAAU,CAACU,KAAD,CAAtB,CAAjC,KACK,IAAIP,GAAG,CAACc,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiCE,SAAS,GAAGpB,UAAU,CAACW,KAAD,CAAtB,CAAjC,KACA,IAAIP,GAAG,CAACc,KAAD,EAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAR,CAAP,EAAiCE,SAAS,GAAGT,KAAZ;AAEtC,WAAOI,UAAU,CAACK,SAAD,EAAY,CAAChB,GAAG,CAACc,KAAD,EAAQ,CAAC,GAAD,CAAR,CAAhB,CAAjB;AACD;;AAED,SAAOP,KAAP;AACD;AAED,OAAO,SAASU,QAAT,CAAmBV,KAAnB,EAA+B;AACpC,MAAI,CAACA,KAAL,EAAY,OAAO,KAAP;;AAEZ,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAACW,MAAN,GAAe,CAAtB;AACD;;AAED,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOP,GAAG,CAACO,KAAD,EAAQ,CAAC,GAAD,CAAR,CAAH,IAAqBP,GAAG,CAACO,KAAD,EAAQ,CAAC,OAAD,CAAR,CAA/B;AACD;;AAED,SAAO,KAAP;AACD;AAED,OAAO,MAAMY,SAAS,GAAG;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE,CAAX;AAAcC,EAAAA,CAAC,EAAE,CAAjB;AAAoBZ,EAAAA,CAAC,EAAE;AAAvB,CAAlB;AAaP,MAAMa,IAAqB,GAAG;AAC5BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE,QADI;AAEVC,IAAAA,GAAG,EAAE;AAFK,GADgB;AAK5BC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,GAFP;AAGEC,IAAAA,IAAI,EAAE,CAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,CAAb,CAJzB;AAKEC,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQG,MAAAA,CAAC,EAAEE,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GADM,EAQN;AACEM,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,GAFP;AAGEC,IAAAA,IAAI,EAAE,CAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACM,CAAb,CAJzB;AAKEF,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQM,MAAAA,CAAC,EAAED,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GARM,EAeN;AACEM,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,GAFP;AAGEC,IAAAA,IAAI,EAAE,CAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACO,CAAb,CAJzB;AAKEH,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQO,MAAAA,CAAC,EAAEF,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GAfM,EAsBN;AACEM,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,CAFP;AAGEC,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACtB,CAAF,GAAM,GAAjB,IAAwB,GAJjD;AAKE0B,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQtB,MAAAA,CAAC,EAAE2B,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GAtBM,CALoB;AAmC5BkB,EAAAA,EAAE,EAAE3C,UAnCwB;AAoC5B4C,EAAAA,IAAI,EAAE1C;AApCsB,CAA9B;AAuCA,MAAM2C,GAAG,GAAG,EACV,GAAGnB,IADO;AAEVI,EAAAA,MAAM,kBAAEJ,IAAI,CAACI,MAAP,qBAAE,aAAaZ,KAAb,CAAmB,CAAnB,EAAsB,CAAtB;AAFE,CAAZ;AAKA,MAAM4B,IAAqB,GAAG;AAC5BnB,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE,QADI;AAEVC,IAAAA,GAAG,EAAE;AAFK,GADgB;AAK5BC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,GAFP;AAGEC,IAAAA,IAAI,EAAE,CAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACZ,CAAb,CAJzB;AAKEgB,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQZ,MAAAA,CAAC,EAAEiB,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GADM,EAQN;AACEM,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,CAFP;AAGEC,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACX,CAAF,GAAM,GAAjB,IAAwB,GAJjD;AAKEe,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQX,MAAAA,CAAC,EAAEgB,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GARM,EAeN;AACEM,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,CAFP;AAGEC,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACY,CAAF,GAAM,GAAjB,IAAwB,GAJjD;AAKER,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQY,MAAAA,CAAC,EAAEP,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GAfM,EAsBN;AACEM,IAAAA,KAAK,EAAE,GADT;AAEEC,IAAAA,GAAG,EAAE,CAFP;AAGEC,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,QAAQ,EAAGC,CAAD,IAAaC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACtB,CAAF,GAAM,GAAjB,IAAwB,GAJjD;AAKE0B,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAUV,CAAV,MAA+B,EAAE,GAAGU,CAAL;AAAQtB,MAAAA,CAAC,EAAE2B,MAAM,CAACf,CAAD;AAAjB,KAA/B;AALZ,GAtBM,CALoB;AAmC5BkB,EAAAA,EAAE,EAAE5C,UAnCwB;AAoC5B6C,EAAAA,IAAI,EAAE/C;AApCsB,CAA9B;AAuCA,MAAMmD,GAAG,GAAG,EACV,GAAGF,IADO;AAEVhB,EAAAA,MAAM,EAAEgB,IAAI,CAAChB,MAAL,CAAYZ,KAAZ,CAAkB,CAAlB,EAAqB,CAArB;AAFE,CAAZ;AAKA,MAAM+B,IAAqB,GAAG;AAC5BtB,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE;AADI,GADgB;AAI5BE,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,KAAK,EAAE,MADT;AAEEG,IAAAA,QAAQ,EAAGC,CAAD,IAAeA,CAF3B;AAGEI,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAYV,CAAZ,KAA0BA;AAHtC,GADM,CAJoB;AAW5BkB,EAAAA,EAAE,EAAE7C,SAXwB;AAY5B8C,EAAAA,IAAI,EAAEhD;AAZsB,CAA9B;AAeA,MAAMgB,GAAG,GAAG,EACV,GAAGqC,IADO;AAEVnB,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,KAAK,EAAE,KADT;AAEEG,IAAAA,QAAQ,EAAGC,CAAD,IAAeA,CAAC,CAACjB,KAAF,CAAQ,CAAR,EAAW,CAAX,CAF3B;AAGEqB,IAAAA,QAAQ,EAAE,CAACJ,CAAD,EAAYV,CAAZ,KAA0BA;AAHtC,GADM;AAFE,CAAZ;AAWA,OAAO,MAAMyB,KAAsC,GAAG;AACpDL,EAAAA,GADoD;AAEpDnB,EAAAA,IAFoD;AAGpDsB,EAAAA,GAHoD;AAIpDF,EAAAA,IAJoD;AAKpDlC,EAAAA,GALoD;AAMpDqC,EAAAA;AANoD,CAA/C","sourcesContent":["// Utilities\nimport {\n  HexToHSVA,\n  HSLAtoHSVA,\n  HSVAtoHex,\n  HSVAtoHSLA,\n  HSVAtoRGBA,\n  parseHex,\n  RGBAtoHSVA,\n} from '@/util/colorUtils'\n\n// Types\nimport type {\n  HSLA,\n  HSVA,\n  RGBA,\n} from '@/util/colorUtils'\n\nfunction has (obj: object, key: string[]) {\n  return key.every(k => obj.hasOwnProperty(k))\n}\n\nexport function parseColor (color: any): HSVA | null {\n  if (!color) return null\n\n  let hsva: HSVA | null = null\n\n  if (typeof color === 'string') {\n    const hex = parseHex(color)\n\n    hsva = HexToHSVA(hex)\n  }\n\n  if (typeof color === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      hsva = RGBAtoHSVA(color)\n    } else if (has(color, ['h', 's', 'l'])) {\n      hsva = HSLAtoHSVA(color)\n    } else if (has(color, ['h', 's', 'v'])) {\n      hsva = color\n    }\n  }\n\n  return hsva != null ? { ...hsva, a: hsva.a ?? 1 } : null\n}\n\nfunction stripAlpha (color: any, stripAlpha: boolean) {\n  if (stripAlpha) {\n    const { a, ...rest } = color\n\n    return rest\n  }\n\n  return color\n}\n\nexport function extractColor (color: HSVA, input: any) {\n  if (input == null || typeof input === 'string') {\n    const hex = HSVAtoHex(color)\n\n    if (color.a === 1) return hex.slice(0, 7)\n    else return hex\n  }\n\n  if (typeof input === 'object') {\n    let converted\n\n    if (has(input, ['r', 'g', 'b'])) converted = HSVAtoRGBA(color)\n    else if (has(input, ['h', 's', 'l'])) converted = HSVAtoHSLA(color)\n    else if (has(input, ['h', 's', 'v'])) converted = color\n\n    return stripAlpha(converted, !has(input, ['a']))\n  }\n\n  return color\n}\n\nexport function hasAlpha (color: any) {\n  if (!color) return false\n\n  if (typeof color === 'string') {\n    return color.length > 7\n  }\n\n  if (typeof color === 'object') {\n    return has(color, ['a']) || has(color, ['alpha'])\n  }\n\n  return false\n}\n\nexport const nullColor = { h: 0, s: 0, v: 1, a: 1 }\n\nexport type ColorPickerMode = {\n  inputProps: Record<string, unknown>\n  inputs: {\n    [key: string]: any\n    getValue: (color: any) => number | string\n    getColor: (color: any, v: string) => any\n  }[]\n  from: (color: any) => HSVA\n  to: (color: HSVA) => any\n}\n\nconst rgba: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'R',\n      max: 255,\n      step: 1,\n      getValue: (c: RGBA) => Math.round(c.r),\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, r: Number(v) }),\n    },\n    {\n      label: 'G',\n      max: 255,\n      step: 1,\n      getValue: (c: RGBA) => Math.round(c.g),\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, g: Number(v) }),\n    },\n    {\n      label: 'B',\n      max: 255,\n      step: 1,\n      getValue: (c: RGBA) => Math.round(c.b),\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, b: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: (c: RGBA) => Math.round(c.a * 100) / 100,\n      getColor: (c: RGBA, v: string): RGBA => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVAtoRGBA,\n  from: RGBAtoHSVA,\n}\n\nconst rgb = {\n  ...rgba,\n  inputs: rgba.inputs?.slice(0, 3),\n}\n\nconst hsla: ColorPickerMode = {\n  inputProps: {\n    type: 'number',\n    min: 0,\n  },\n  inputs: [\n    {\n      label: 'H',\n      max: 360,\n      step: 1,\n      getValue: (c: HSLA) => Math.round(c.h),\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, h: Number(v) }),\n    },\n    {\n      label: 'S',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSLA) => Math.round(c.s * 100) / 100,\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, s: Number(v) }),\n    },\n    {\n      label: 'L',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSLA) => Math.round(c.l * 100) / 100,\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, l: Number(v) }),\n    },\n    {\n      label: 'A',\n      max: 1,\n      step: 0.01,\n      getValue: (c: HSLA) => Math.round(c.a * 100) / 100,\n      getColor: (c: HSLA, v: string): HSLA => ({ ...c, a: Number(v) }),\n    },\n  ],\n  to: HSVAtoHSLA,\n  from: HSLAtoHSVA,\n}\n\nconst hsl = {\n  ...hsla,\n  inputs: hsla.inputs.slice(0, 3),\n}\n\nconst hexa: ColorPickerMode = {\n  inputProps: {\n    type: 'text',\n  },\n  inputs: [\n    {\n      label: 'HEXA',\n      getValue: (c: string) => c,\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n  to: HSVAtoHex,\n  from: HexToHSVA,\n}\n\nconst hex = {\n  ...hexa,\n  inputs: [\n    {\n      label: 'HEX',\n      getValue: (c: string) => c.slice(0, 7),\n      getColor: (c: string, v: string) => v,\n    },\n  ],\n}\n\nexport const modes: Record<string, ColorPickerMode> = {\n  rgb,\n  rgba,\n  hsl,\n  hsla,\n  hex,\n  hexa,\n}\n"],"file":"index.mjs"}