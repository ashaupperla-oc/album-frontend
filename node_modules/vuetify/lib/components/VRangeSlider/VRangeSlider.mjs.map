{"version":3,"sources":["../../../src/components/VRangeSlider/VRangeSlider.tsx"],"names":["VInput","VSliderThumb","VSliderTrack","getOffset","makeSliderProps","useSlider","makeFocusProps","useFocus","useProxiedModel","computed","ref","defineComponent","filterInputProps","makeVInputProps","VRangeSlider","name","props","strict","Boolean","modelValue","type","Array","default","emits","value","setup","slots","attrs","startThumbRef","stopThumbRef","inputRef","getActiveThumb","e","startOffset","$el","direction","stopOffset","a","Math","abs","b","min","max","mousePressed","roundValue","onSliderMousedown","onSliderTouchstart","trackContainerRef","position","hasLabels","activeThumbRef","handleSliderMouseUp","newValue","model","handleMouseMove","start","stop","focus","undefined","arr","length","map","isFocused","blur","trackStart","trackStop","inputProps","_","disabled","id","readonly","v","relatedTarget"],"mappings":"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","sourcesContent":["// Styles\nimport '../VSlider/VSlider.sass'\n\n// Components\nimport { VInput } from '../VInput'\nimport { VSliderThumb } from '../VSlider/VSliderThumb'\nimport { VSliderTrack } from '../VSlider/VSliderTrack'\n\n// Composables\nimport { getOffset, makeSliderProps, useSlider } from '../VSlider/slider'\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { defineComponent } from '@/util'\n\n// Types\nimport type { PropType, WritableComputedRef } from 'vue'\nimport { filterInputProps, makeVInputProps } from '../VInput/VInput'\n\nexport const VRangeSlider = defineComponent({\n  name: 'VRangeSlider',\n\n  props: {\n    ...makeFocusProps(),\n    ...makeVInputProps(),\n    ...makeSliderProps(),\n\n    strict: Boolean,\n    modelValue: {\n      type: Array as PropType<number[]>,\n      default: () => ([0, 0]),\n    },\n  },\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (value: [number, number]) => true,\n  },\n\n  setup (props, { slots, attrs }) {\n    const startThumbRef = ref<VSliderThumb>()\n    const stopThumbRef = ref<VSliderThumb>()\n    const inputRef = ref<VInput>()\n\n    function getActiveThumb (e: MouseEvent | TouchEvent) {\n      if (!startThumbRef.value || !stopThumbRef.value) return\n\n      const startOffset = getOffset(e, startThumbRef.value.$el, props.direction)\n      const stopOffset = getOffset(e, stopThumbRef.value.$el, props.direction)\n\n      const a = Math.abs(startOffset)\n      const b = Math.abs(stopOffset)\n\n      return (a < b || (a === b && startOffset < 0)) ? startThumbRef.value.$el : stopThumbRef.value.$el\n    }\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      activeThumbRef,\n    } = useSlider({\n      /* eslint-disable @typescript-eslint/no-use-before-define */\n      props,\n      handleSliderMouseUp: newValue => {\n        model.value = activeThumbRef.value === startThumbRef.value?.$el ? [newValue, model.value[1]] : [model.value[0], newValue]\n      },\n      handleMouseMove: newValue => {\n        const [start, stop] = model.value\n\n        if (!props.strict && start === stop && start !== min.value) {\n          activeThumbRef.value = newValue > start ? stopThumbRef.value?.$el : startThumbRef.value?.$el\n          activeThumbRef.value?.focus()\n        }\n\n        if (activeThumbRef.value === startThumbRef.value?.$el) {\n          model.value = [Math.min(newValue, stop), stop]\n        } else {\n          model.value = [start, Math.max(start, newValue)]\n        }\n      },\n      getActiveThumb,\n      /* eslint-enable @typescript-eslint/no-use-before-define */\n    })\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      arr => {\n        if (!arr || !arr.length) return [0, 0]\n\n        return arr.map(value => roundValue(value))\n      },\n    ) as WritableComputedRef<[number, number]>\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStart = computed(() => position(model.value[0]))\n    const trackStop = computed(() => position(model.value[1]))\n\n    return () => {\n      const [inputProps, _] = filterInputProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            'v-range-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n          ]}\n          ref={ inputRef }\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({ id }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ onSliderMousedown }\n                onTouchstartPassive={ onSliderTouchstart }\n              >\n                <input\n                  id={ `${id.value}_start` }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value[0] }\n                />\n\n                <input\n                  id={ `${id.value}_stop` }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value[1] }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ trackStart.value }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ startThumbRef }\n                  focused={ isFocused && activeThumbRef.value === startThumbRef.value?.$el }\n                  modelValue={ model.value[0] }\n                  onUpdate:modelValue={ v => (model.value = [v, model.value[1]]) }\n                  onFocus={ (e: FocusEvent) => {\n                    focus()\n                    activeThumbRef.value = startThumbRef.value?.$el\n\n                    // Make sure second thumb is focused if\n                    // the thumbs are on top of each other\n                    // and they are both at minimum value\n                    // but only if focused from outside.\n                    if (\n                      model.value[0] === model.value[1] &&\n                      model.value[1] === min.value &&\n                      e.relatedTarget !== stopThumbRef.value?.$el\n                    ) {\n                      startThumbRef.value?.$el.blur()\n                      stopThumbRef.value?.$el.focus()\n                    }\n                  } }\n                  onBlur={ () => {\n                    blur()\n                    activeThumbRef.value = undefined\n                  } }\n                  min={ min.value }\n                  max={ model.value[1] }\n                  position={ trackStart.value }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n\n                <VSliderThumb\n                  ref={ stopThumbRef }\n                  focused={ isFocused && activeThumbRef.value === stopThumbRef.value?.$el }\n                  modelValue={ model.value[1] }\n                  onUpdate:modelValue={ v => (model.value = [model.value[0], v]) }\n                  onFocus={ (e: FocusEvent) => {\n                    focus()\n                    activeThumbRef.value = stopThumbRef.value?.$el\n\n                    // Make sure first thumb is focused if\n                    // the thumbs are on top of each other\n                    // and they are both at maximum value\n                    // but only if focused from outside.\n                    if (\n                      model.value[0] === model.value[1] &&\n                      model.value[0] === max.value &&\n                      e.relatedTarget !== startThumbRef.value?.$el\n                    ) {\n                      stopThumbRef.value?.$el.blur()\n                      startThumbRef.value?.$el.focus()\n                    }\n                  } }\n                  onBlur={ () => {\n                    blur()\n                    activeThumbRef.value = undefined\n                  } }\n                  min={ model.value[0] }\n                  max={ max.value }\n                  position={ trackStop.value }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    }\n  },\n})\n\nexport type VRangeSlider = InstanceType<typeof VRangeSlider>\n"],"file":"VRangeSlider.mjs"}