{"version":3,"sources":["../../../src/components/VTabs/VTabs.tsx"],"names":["VSlideGroup","VTab","useBackgroundColor","provideDefaults","makeDensityProps","useDensity","makeTagProps","computed","toRef","defineComponent","VTabsSymbol","parseItems","items","map","item","title","value","VTabs","name","props","alignWithTitle","Boolean","color","String","direction","type","default","fixedTabs","Array","stacked","backgroundColor","centered","grow","height","Number","undefined","hideSlider","optional","end","sliderColor","modelValue","emits","v","setup","slots","emit","parsedItems","densityClasses","backgroundColorClasses","backgroundColorStyles","fixed"],"mappings":"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","sourcesContent":["// Styles\nimport './VTabs.sass'\n\n// Components\nimport { VSlideGroup } from '@/components/VSlideGroup'\nimport { VTab } from './VTab'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent } from '@/util'\nimport { VTabsSymbol } from './shared'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type TabItem = string | Record<string, any>\n\nfunction parseItems (items: TabItem[] | undefined) {\n  if (!items) return []\n\n  return items.map(item => {\n    if (typeof item === 'string') return { title: item, value: item }\n\n    return item\n  })\n}\n\nexport const VTabs = defineComponent({\n  name: 'VTabs',\n\n  props: {\n    alignWithTitle: Boolean,\n    color: String,\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    fixedTabs: Boolean,\n    items: {\n      type: Array as PropType<TabItem[]>,\n      default: () => ([]),\n    },\n    stacked: Boolean,\n    backgroundColor: String,\n    centered: Boolean,\n    grow: Boolean,\n    height: {\n      type: [Number, String],\n      default: undefined,\n    },\n    hideSlider: Boolean,\n    optional: Boolean,\n    end: Boolean,\n    sliderColor: String,\n    modelValue: null,\n\n    ...makeDensityProps(),\n    ...makeTagProps(),\n  },\n\n  emits: {\n    'update:modelValue': (v: unknown) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const parsedItems = computed(() => parseItems(props.items))\n    const { densityClasses } = useDensity(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'backgroundColor'))\n\n    provideDefaults({\n      VTab: {\n        color: toRef(props, 'color'),\n        direction: toRef(props, 'direction'),\n        stacked: toRef(props, 'stacked'),\n        fixed: toRef(props, 'fixedTabs'),\n        sliderColor: toRef(props, 'sliderColor'),\n        hideSlider: toRef(props, 'hideSlider'),\n      },\n    })\n\n    return () => (\n      <VSlideGroup\n        class={[\n          'v-tabs',\n          `v-tabs--${props.direction}`,\n          {\n            'v-tabs--align-with-title': props.alignWithTitle,\n            'v-tabs--centered': props.centered,\n            'v-tabs--fixed-tabs': props.fixedTabs,\n            'v-tabs--grow': props.grow,\n            'v-tabs--end': props.end,\n            'v-tabs--stacked': props.stacked,\n          },\n          densityClasses.value,\n          backgroundColorClasses.value,\n        ]}\n        style={backgroundColorStyles.value}\n        role=\"tablist\"\n        symbol={ VTabsSymbol }\n        mandatory=\"force\"\n        direction={ props.direction }\n        modelValue={ props.modelValue }\n        onUpdate:modelValue={ v => emit('update:modelValue', v) }\n      >\n        { slots.default ? slots.default() : parsedItems.value.map(item => (\n          <VTab { ...item } key={ item.title } />\n        )) }\n      </VSlideGroup>\n    )\n  },\n})\n\nexport type VTabs = InstanceType<typeof VTabs>\n"],"file":"VTabs.mjs"}