{"version":3,"sources":["../../../src/components/VChipGroup/VChipGroup.tsx"],"names":["makeGroupProps","useGroup","makeTagProps","makeThemeProps","provideTheme","makeVariantProps","provideDefaults","deepEqual","defineComponent","toRef","VChipGroupSymbol","Symbol","for","VChipGroup","name","props","column","Boolean","filter","valueComparator","type","Function","default","selectedClass","variant","emits","value","setup","slots","themeClasses","isSelected","select","next","prev","selected","VChip","color"],"mappings":";AAAA;AACA,0B,CAEA;;SACSA,c,EAAgBC,Q;SAChBC,Y;SACAC,c,EAAgBC,Y;SAChBC,gB;SACAC,e,0CAET;;SACSC,S,EAAWC,e;AACpB,SAASC,KAAT,QAAsB,KAAtB,C,CAEA;;AAGA,OAAO,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,GAAP,CAAW,sBAAX,CAAzB;AAEP,OAAO,MAAMC,UAAU,GAAGL,eAAe,CAAC;AACxCM,EAAAA,IAAI,EAAE,YADkC;AAGxCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEC,OADH;AAELC,IAAAA,MAAM,EAAED,OAFH;AAGLE,IAAAA,eAAe,EAAE;AACfC,MAAAA,IAAI,EAAEC,QADS;AAEfC,MAAAA,OAAO,EAAEf;AAFM,KAHZ;AAQL,OAAGP,cAAc,CAAC;AAAEuB,MAAAA,aAAa,EAAE;AAAjB,KAAD,CARZ;AASL,OAAGrB,YAAY,EATV;AAUL,OAAGC,cAAc,EAVZ;AAWL,OAAGE,gBAAgB,CAAC;AAAEmB,MAAAA,OAAO,EAAE;AAAX,KAAD;AAXd,GAHiC;AAiBxCC,EAAAA,KAAK,EAAE;AACL,yBAAsBC,KAAD,IAAgB;AADhC,GAjBiC;;AAqBxCC,EAAAA,KAAK,CAAEZ,KAAF,QAAoB;AAAA,QAAX;AAAEa,MAAAA;AAAF,KAAW;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAmBzB,YAAY,CAACW,KAAD,CAArC;AACA,UAAM;AAAEe,MAAAA,UAAF;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA,IAAtB;AAA4BC,MAAAA,IAA5B;AAAkCC,MAAAA;AAAlC,QAA+CjC,QAAQ,CAACc,KAAD,EAAQL,gBAAR,CAA7D;AAEAJ,IAAAA,eAAe,CAAC;AACd6B,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE3B,KAAK,CAACM,KAAD,EAAQ,OAAR,CADP;AAELG,QAAAA,MAAM,EAAET,KAAK,CAACM,KAAD,EAAQ,QAAR,CAFR;AAGLS,QAAAA,OAAO,EAAEf,KAAK,CAACM,KAAD,EAAQ,SAAR;AAHT;AADO,KAAD,CAAf;AAQA,WAAO;AAAA;;AAAA;AAAA,iBAEI,CACL,cADK,EAEL;AACE,kCAAwBA,KAAK,CAACC;AADhC,SAFK,EAKLa,YAAY,CAACH,KALR;AAFJ;AAAA,0CAUDE,KAAK,CAACN,OAVL,qBAUD,oBAAAM,KAAK,EAAW;AAChBE,UAAAA,UADgB;AAEhBC,UAAAA,MAFgB;AAGhBC,UAAAA,IAHgB;AAIhBC,UAAAA,IAJgB;AAKhBC,UAAAA,QAAQ,EAAEA,QAAQ,CAACR;AALH,SAAX,CAVJ;AAAA;AAAA,KAAP;AAmBD;;AApDuC,CAAD,CAAlC","sourcesContent":["// Styles\nimport './VChipGroup.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeVariantProps } from '@/composables/variant'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { deepEqual, defineComponent } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VChipGroupSymbol = Symbol.for('vuetify:v-chip-group')\n\nexport const VChipGroup = defineComponent({\n  name: 'VChipGroup',\n\n  props: {\n    column: Boolean,\n    filter: Boolean,\n    valueComparator: {\n      type: Function as PropType<typeof deepEqual>,\n      default: deepEqual,\n    },\n\n    ...makeGroupProps({ selectedClass: 'v-chip--selected' }),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'contained-text' } as const),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { isSelected, select, next, prev, selected } = useGroup(props, VChipGroupSymbol)\n\n    provideDefaults({\n      VChip: {\n        color: toRef(props, 'color'),\n        filter: toRef(props, 'filter'),\n        variant: toRef(props, 'variant'),\n      },\n    })\n\n    return () => (\n      <props.tag\n        class={[\n          'v-chip-group',\n          {\n            'v-chip-group--column': props.column,\n          },\n          themeClasses.value,\n        ]}\n      >\n        { slots.default?.({\n          isSelected,\n          select,\n          next,\n          prev,\n          selected: selected.value,\n        }) }\n      </props.tag>\n    )\n  },\n})\n\nexport type VChipGroup = InstanceType<typeof VChipGroup>\n"],"file":"VChipGroup.mjs"}