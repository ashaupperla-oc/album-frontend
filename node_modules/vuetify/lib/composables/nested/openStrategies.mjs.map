{"version":3,"sources":["../../../src/composables/nested/openStrategies.ts"],"names":["singleOpenStrategy","open","id","value","opened","parents","newOpened","Set","add","parent","get","delete","select","multipleOpenStrategy","listOpenStrategy","path","push"],"mappings":"AAwBA,OAAO,MAAMA,kBAAgC,GAAG;AAC9CC,EAAAA,IAAI,EAAE,QAAoC;AAAA,QAAnC;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,KAAmC;;AACxC,QAAIF,KAAJ,EAAW;AACT,YAAMG,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAD,MAAAA,SAAS,CAACE,GAAV,CAAcN,EAAd;AAEA,UAAIO,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYR,EAAZ,CAAb;;AAEA,aAAOO,MAAM,IAAI,IAAjB,EAAuB;AACrBH,QAAAA,SAAS,CAACE,GAAV,CAAcC,MAAd;AACAA,QAAAA,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYD,MAAZ,CAAT;AACD;;AAED,aAAOH,SAAP;AACD,KAZD,MAYO;AACLF,MAAAA,MAAM,CAACO,MAAP,CAAcT,EAAd;AACA,aAAOE,MAAP;AACD;AACF,GAlB6C;AAmB9CQ,EAAAA,MAAM,EAAE,MAAM;AAnBgC,CAAzC;AAsBP,OAAO,MAAMC,oBAAkC,GAAG;AAChDZ,EAAAA,IAAI,EAAE,SAAoC;AAAA,QAAnC;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,KAAmC;;AACxC,QAAIF,KAAJ,EAAW;AACT,UAAIM,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYR,EAAZ,CAAb;AACAE,MAAAA,MAAM,CAACI,GAAP,CAAWN,EAAX;;AAEA,aAAOO,MAAM,IAAI,IAAV,IAAkBA,MAAM,KAAKP,EAApC,EAAwC;AACtCE,QAAAA,MAAM,CAACI,GAAP,CAAWC,MAAX;AACAA,QAAAA,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYD,MAAZ,CAAT;AACD;;AAED,aAAOL,MAAP;AACD,KAVD,MAUO;AACLA,MAAAA,MAAM,CAACO,MAAP,CAAcT,EAAd;AACD;;AACD,WAAOE,MAAP;AACD,GAhB+C;AAiBhDQ,EAAAA,MAAM,EAAE,MAAM;AAjBkC,CAA3C;AAoBP,OAAO,MAAME,gBAA8B,GAAG;AAC5Cb,EAAAA,IAAI,EAAEY,oBAAoB,CAACZ,IADiB;AAE5CW,EAAAA,MAAM,EAAE,SAAoC;AAAA,QAAnC;AAAEV,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,KAAmC;AAC1C,QAAI,CAACF,KAAL,EAAY,OAAOC,MAAP;AAEZ,UAAMW,IAAc,GAAG,EAAvB;AAEA,QAAIN,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYR,EAAZ,CAAb;;AAEA,WAAOO,MAAM,IAAI,IAAjB,EAAuB;AACrBM,MAAAA,IAAI,CAACC,IAAL,CAAUP,MAAV;AACAA,MAAAA,MAAM,GAAGJ,OAAO,CAACK,GAAR,CAAYD,MAAZ,CAAT;AACD;;AAED,WAAO,IAAIF,GAAJ,CAAQQ,IAAR,CAAP;AACD;AAf2C,CAAvC","sourcesContent":["export type OpenStrategyFn = (data: {\n  id: string\n  value: boolean\n  opened: Set<string>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Set<string>\n\nexport type OpenSelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  opened: Set<string>\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n}) => Set<string> | null\n\nexport type OpenStrategy = {\n  open: OpenStrategyFn\n  select: OpenSelectStrategyFn\n}\n\nexport const singleOpenStrategy: OpenStrategy = {\n  open: ({ id, value, opened, parents }) => {\n    if (value) {\n      const newOpened = new Set<string>()\n      newOpened.add(id)\n\n      let parent = parents.get(id)\n\n      while (parent != null) {\n        newOpened.add(parent)\n        parent = parents.get(parent)\n      }\n\n      return newOpened\n    } else {\n      opened.delete(id)\n      return opened\n    }\n  },\n  select: () => null,\n}\n\nexport const multipleOpenStrategy: OpenStrategy = {\n  open: ({ id, value, opened, parents }) => {\n    if (value) {\n      let parent = parents.get(id)\n      opened.add(id)\n\n      while (parent != null && parent !== id) {\n        opened.add(parent)\n        parent = parents.get(parent)\n      }\n\n      return opened\n    } else {\n      opened.delete(id)\n    }\n    return opened\n  },\n  select: () => null,\n}\n\nexport const listOpenStrategy: OpenStrategy = {\n  open: multipleOpenStrategy.open,\n  select: ({ id, value, opened, parents }) => {\n    if (!value) return opened\n\n    const path: string[] = []\n\n    let parent = parents.get(id)\n\n    while (parent != null) {\n      path.push(parent)\n      parent = parents.get(parent)\n    }\n\n    return new Set(path)\n  },\n}\n"],"file":"openStrategies.mjs"}