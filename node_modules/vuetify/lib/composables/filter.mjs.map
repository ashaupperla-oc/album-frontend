{"version":3,"sources":["../../src/composables/filter.ts"],"names":["getPropertyFromItem","propsFactory","wrapInArray","computed","unref","defaultFilter","value","query","item","toString","toLocaleLowerCase","indexOf","makeFilterProps","customFilter","Function","customKeyFilter","Object","filterKeys","Array","String","filterMode","type","default","noFilter","Boolean","filterItems","items","options","array","filter","keys","customFiltersLength","length","loop","customMatches","defaultMatches","match","key","keyFilter","defaultMatchesLength","customMatchesLength","push","matches","useFilter","props","strQuery","filteredItems"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements */\n/* eslint-disable no-labels */\n\n// Utilities\nimport { getPropertyFromItem, propsFactory, wrapInArray } from '@/util'\nimport { computed, unref } from 'vue'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport type FilterFunction = (value: string, query: string, item?: any) => FilterMatch\nexport type FilterKeyFunctions = Record<string, FilterFunction>\nexport type FilterKeys = string | string[]\nexport type FilterMatch = number | [number, number] | [number, number][] | boolean\nexport type FilterMode = 'some' | 'every' | 'union' | 'intersection'\n\nexport interface FilterProps {\n  customFilter?: FilterFunction\n  customKeyFilter?: FilterKeyFunctions\n  filterKeys?: FilterKeys\n  filterMode?: FilterMode\n  noFilter?: boolean\n}\n\n// Composables\nexport const defaultFilter: FilterFunction = (value, query, item) => {\n  if (value == null || query == null) return -1\n\n  return value.toString().toLocaleLowerCase().indexOf(query.toString().toLocaleLowerCase())\n}\n\nexport const makeFilterProps = propsFactory({\n  customFilter: Function as PropType<FilterFunction>,\n  customKeyFilter: Object as PropType<FilterKeyFunctions>,\n  filterKeys: [Array, String] as PropType<FilterKeys>,\n  filterMode: {\n    type: String as PropType<FilterMode>,\n    default: 'intersection',\n  },\n  noFilter: Boolean,\n}, 'filter')\n\nexport function filterItems<T = Record<string, any>> (\n  items: T[],\n  query: string,\n  options?: {\n    customKeyFilter?: FilterKeyFunctions\n    default?: FilterFunction\n    filterKeys?: FilterKeys\n    filterMode?: FilterMode\n    noFilter?: boolean\n  },\n) {\n  const array: { item: T, matches: Record<string, FilterMatch> }[] = []\n  // always ensure we fall back to a functioning filter\n  const filter = options?.default ?? defaultFilter\n  const keys = options?.filterKeys ? wrapInArray(options.filterKeys) : false\n  const customFiltersLength = Object.keys(options?.customKeyFilter ?? {}).length\n\n  if (!items?.length) return array\n\n  loop:\n  for (const item of items) {\n    const customMatches: Record<string, FilterMatch> = {}\n    const defaultMatches: Record<string, FilterMatch> = {}\n    let match: FilterMatch = -1\n\n    if (query && typeof item === 'object' && !options?.noFilter) {\n      const filterKeys = keys || Object.keys(item)\n\n      for (const key of filterKeys) {\n        const value = getPropertyFromItem(item as any, key, item)\n        const keyFilter = options?.customKeyFilter?.[key]\n\n        match = keyFilter\n          ? keyFilter(value, query, item)\n          : filter(value, query, item)\n\n        if (match !== -1 && match !== false) {\n          if (keyFilter) customMatches[key] = match\n          else defaultMatches[key] = match\n        } else if (options?.filterMode === 'every') {\n          continue loop\n        }\n      }\n\n      const defaultMatchesLength = Object.keys(defaultMatches).length\n      const customMatchesLength = Object.keys(customMatches).length\n\n      if (!defaultMatchesLength && !customMatchesLength) continue\n\n      if (\n        options?.filterMode === 'union' &&\n        customMatchesLength !== customFiltersLength &&\n        !defaultMatchesLength\n      ) continue\n\n      if (\n        options?.filterMode === 'intersection' &&\n        (\n          customMatchesLength !== customFiltersLength ||\n          !defaultMatchesLength\n        )\n      ) continue\n    }\n\n    array.push({ item, matches: { ...defaultMatches, ...customMatches } })\n  }\n\n  return array\n}\n\nexport function useFilter<T> (\n  props: FilterProps,\n  items: MaybeRef<T[]>,\n  query?: Ref<string | undefined>,\n) {\n  const strQuery = computed(() => (\n    typeof query?.value !== 'string' &&\n    typeof query?.value !== 'number'\n  ) ? '' : String(query.value))\n\n  const filteredItems = computed(() => {\n    return filterItems(\n      unref(items),\n      strQuery.value,\n      {\n        customKeyFilter: props.customKeyFilter,\n        default: props.customFilter,\n        filterKeys: props.filterKeys,\n        filterMode: props.filterMode,\n        noFilter: props.noFilter,\n      },\n    )\n  })\n\n  return { filteredItems }\n}\n"],"file":"filter.mjs"}