{"version":3,"sources":["../../src/composables/validation.ts"],"names":["useForm","useProxiedModel","computed","onBeforeMount","onBeforeUnmount","ref","watch","getCurrentInstanceName","getUid","propsFactory","wrapInArray","makeValidationProps","disabled","Boolean","error","errorMessages","type","Array","String","default","maxErrors","Number","name","readonly","rules","modelValue","useValidation","props","model","form","internalErrorMessages","isPristine","isDirty","value","length","isDisabled","isReadonly","isValid","isValidating","validationClasses","uid","register","validate","reset","resetValidation","unregister","results","rule","handler","result","console","warn","push"],"mappings":"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","sourcesContent":["// Composables\nimport { useForm } from '@/composables/form'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue'\nimport { getCurrentInstanceName, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport type ValidationResult = string | true\nexport type ValidationRule =\n  | ValidationResult\n  | PromiseLike<ValidationResult>\n  | ((value: any) => ValidationResult)\n  | ((value: any) => PromiseLike<ValidationResult>)\n\nexport interface ValidationProps {\n  disabled: boolean\n  error: boolean\n  errorMessages: string | string[]\n  maxErrors: string | number\n  name: string | undefined\n  readonly: boolean\n  rules: ValidationRule[]\n  modelValue: any\n  'onUpdate:modelValue': ((val: any) => void) | undefined\n}\n\nexport const makeValidationProps = propsFactory({\n  disabled: Boolean,\n  error: Boolean,\n  errorMessages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  maxErrors: {\n    type: [Number, String],\n    default: 1,\n  },\n  name: String,\n  readonly: Boolean,\n  rules: {\n    type: Array as PropType<ValidationRule[]>,\n    default: () => ([]),\n  },\n  modelValue: null,\n})\n\nexport function useValidation (\n  props: ValidationProps,\n  name = getCurrentInstanceName(),\n) {\n  const model = useProxiedModel(props, 'modelValue')\n  const form = useForm()\n  const internalErrorMessages = ref<string[]>([])\n  const isPristine = ref(true)\n  const isDirty = computed(() => wrapInArray(model.value === '' ? null : model.value).length > 0)\n  const isDisabled = computed(() => !!(props.disabled || form?.isDisabled.value))\n  const isReadonly = computed(() => !!(props.readonly || form?.isReadonly.value))\n  const errorMessages = computed(() => {\n    return props.errorMessages.length\n      ? wrapInArray(props.errorMessages)\n      : internalErrorMessages.value\n  })\n  const isValid = computed(() => {\n    if (props.error || errorMessages.value.length) return false\n\n    return isPristine.value ? null : true\n  })\n  const isValidating = ref(false)\n  const validationClasses = computed(() => {\n    return {\n      [`${name}--error`]: isValid.value === false,\n      [`${name}--dirty`]: isDirty.value,\n      [`${name}--disabled`]: isDisabled.value,\n      [`${name}--readonly`]: isReadonly.value,\n    }\n  })\n\n  const uid = computed(() => props.name ?? getUid())\n\n  onBeforeMount(() => {\n    form?.register(uid.value, validate, reset, resetValidation, isValid)\n  })\n\n  onBeforeUnmount(() => {\n    form?.unregister(uid.value)\n  })\n\n  watch(model, () => {\n    if (model.value != null) validate()\n  })\n\n  function reset () {\n    resetValidation()\n    model.value = null\n  }\n\n  function resetValidation () {\n    isPristine.value = true\n    internalErrorMessages.value = []\n  }\n\n  async function validate () {\n    const results = []\n\n    isValidating.value = true\n\n    for (const rule of props.rules) {\n      if (results.length >= (props.maxErrors || 1)) {\n        break\n      }\n\n      const handler = typeof rule === 'function' ? rule : () => rule\n      const result = await handler(model.value)\n\n      if (result === true) continue\n\n      if (typeof result !== 'string') {\n        // eslint-disable-next-line no-console\n        console.warn(`${result} is not a valid value. Rule functions must return boolean true or a string.`)\n\n        continue\n      }\n\n      results.push(result)\n    }\n\n    internalErrorMessages.value = results\n    isValidating.value = false\n    isPristine.value = false\n\n    return internalErrorMessages.value\n  }\n\n  return {\n    errorMessages,\n    isDirty,\n    isDisabled,\n    isReadonly,\n    isPristine,\n    isValid,\n    isValidating,\n    reset,\n    resetValidation,\n    validate,\n    validationClasses,\n  }\n}\n"],"file":"validation.mjs"}