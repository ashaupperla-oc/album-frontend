{"version":3,"sources":["../../src/composables/stack.ts"],"names":["effectScope","onScopeDispose","readonly","ref","toRaw","watch","watchEffect","getCurrentInstance","stack","useStack","isActive","vm","scope","val","run","value","push","idx","indexOf","splice","stop","immediate","isTop","_isTop","length","setTimeout"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,QAAtC,EAAgDC,GAAhD,EAAqDC,KAArD,EAA4DC,KAA5D,EAAmEC,WAAnE,QAAsF,KAAtF;SACSC,kB,6BAET;;AAGA,MAAMC,KAAK,GAAGL,GAAG,CAA8B,EAA9B,CAAjB;AAEA,OAAO,SAASM,QAAT,CAAmBC,QAAnB,EAA2C;AAChD,QAAMC,EAAE,GAAGJ,kBAAkB,CAAC,UAAD,CAA7B;AACA,MAAIK,KAAJ;AACAP,EAAAA,KAAK,CAACK,QAAD,EAAWG,GAAG,IAAI;AACrB,QAAIA,GAAJ,EAAS;AACPD,MAAAA,KAAK,GAAGZ,WAAW,EAAnB;AACAY,MAAAA,KAAK,CAACE,GAAN,CAAU,MAAM;AACdN,QAAAA,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiBL,EAAjB;AAEAV,QAAAA,cAAc,CAAC,MAAM;AACnB,gBAAMgB,GAAG,GAAGT,KAAK,CAACO,KAAN,CAAYG,OAAZ,CAAoBP,EAApB,CAAZ;AACAH,UAAAA,KAAK,CAACO,KAAN,CAAYI,MAAZ,CAAmBF,GAAnB,EAAwB,CAAxB;AACD,SAHa,CAAd;AAID,OAPD;AAQD,KAVD,MAUO;AAAA;;AACL,gBAAAL,KAAK,SAAL,mBAAOQ,IAAP;AACD;AACF,GAdI,EAcF;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAdE,CAAL;AAgBA,QAAMC,KAAK,GAAGnB,GAAG,CAAC,IAAD,CAAjB;AACAG,EAAAA,WAAW,CAAC,MAAM;AAChB,UAAMiB,MAAM,GAAGnB,KAAK,CAACI,KAAK,CAACO,KAAN,CAAYP,KAAK,CAACO,KAAN,CAAYS,MAAZ,GAAqB,CAAjC,CAAD,CAAL,KAA+Cb,EAA9D;;AACAc,IAAAA,UAAU,CAAC,MAAMH,KAAK,CAACP,KAAN,GAAcQ,MAArB,CAAV;AACD,GAHU,CAAX;AAKA,SAAO;AACLD,IAAAA,KAAK,EAAEpB,QAAQ,CAACoB,KAAD;AADV,GAAP;AAGD","sourcesContent":["import { effectScope, onScopeDispose, readonly, ref, toRaw, watch, watchEffect } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, EffectScope, Ref } from 'vue'\n\nconst stack = ref<ComponentInternalInstance[]>([])\n\nexport function useStack (isActive: Ref<boolean>) {\n  const vm = getCurrentInstance('useStack')\n  let scope: EffectScope | undefined\n  watch(isActive, val => {\n    if (val) {\n      scope = effectScope()\n      scope.run(() => {\n        stack.value.push(vm)\n\n        onScopeDispose(() => {\n          const idx = stack.value.indexOf(vm)\n          stack.value.splice(idx, 1)\n        })\n      })\n    } else {\n      scope?.stop()\n    }\n  }, { immediate: true })\n\n  const isTop = ref(true)\n  watchEffect(() => {\n    const _isTop = toRaw(stack.value[stack.value.length - 1]) === vm\n    setTimeout(() => isTop.value = _isTop)\n  })\n\n  return {\n    isTop: readonly(isTop),\n  }\n}\n"],"file":"stack.mjs"}