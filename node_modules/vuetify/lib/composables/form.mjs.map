{"version":3,"sources":["../../src/composables/form.ts"],"names":["computed","inject","provide","ref","watch","useProxiedModel","consoleWarn","propsFactory","FormKey","Symbol","for","makeFormProps","disabled","Boolean","fastFail","lazyValidation","readonly","modelValue","type","default","createForm","props","model","isDisabled","isReadonly","isValidating","items","errorMessages","validate","results","valid","value","item","itemErrorMessages","length","push","id","reset","forEach","resetValidation","some","isValid","every","deep","register","unregister","filter","useForm"],"mappings":"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","sourcesContent":["// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (\n    id: number | string,\n    validate: () => Promise<string[]>,\n    reset: () => void,\n    resetValidation: () => void,\n    isValid: Ref<boolean | null>,\n  ) => void\n  unregister: (id: number | string) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n  isValid: boolean | null\n}\n\ninterface FormValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport interface SubmitEventPromise extends SubmitEvent, Promise<{ valid: boolean, errorMessages: FormValidationResult[] }> {}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errorMessages = ref<FormValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errorMessages.value = []\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errorMessages.value = results\n    isValidating.value = false\n\n    return { valid, errorMessages: errorMessages.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n    model.value = null\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errorMessages.value = []\n    model.value = null\n  }\n\n  watch(items, () => {\n    let valid = null\n\n    if (items.value.some(item => item.isValid === false)) {\n      valid = false\n    } else if (items.value.every(item => item.isValid === true)) {\n      valid = true\n    }\n\n    model.value = valid\n  }, {\n    deep: true,\n  })\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation, isValid) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        isValid: isValid as unknown as boolean | null, // TODO: Better way to type this unwrapping?\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"],"file":"form.mjs"}