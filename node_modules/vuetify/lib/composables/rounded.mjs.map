{"version":3,"sources":["../../src/composables/rounded.ts"],"names":["computed","isRef","getCurrentInstanceName","propsFactory","makeRoundedProps","rounded","type","Boolean","Number","String","default","undefined","useRounded","props","name","roundedClasses","value","classes","push","split"],"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,sB,EAAwBC,Y,6BAEjC;;AAcA;AACA,OAAO,MAAMC,gBAAgB,GAAGD,YAAY,CAAC;AAC3CE,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,CADC;AAEPC,IAAAA,OAAO,EAAEC;AAFF;AADkC,CAAD,EAKzC,SALyC,CAArC;AAOP,OAAO,SAASC,UAAT,CACLC,KADK,EAGQ;AAAA,MADbC,IACa,uEADNZ,sBAAsB,EAChB;AACb,QAAMa,cAAc,GAAGf,QAAQ,CAAC,MAAM;AACpC,UAAMK,OAAO,GAAGJ,KAAK,CAACY,KAAD,CAAL,GAAeA,KAAK,CAACG,KAArB,GAA6BH,KAAK,CAACR,OAAnD;AACA,UAAMY,OAAiB,GAAG,EAA1B;;AAEA,QAAIZ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,EAApC,EAAwC;AACtCY,MAAAA,OAAO,CAACC,IAAR,CAAc,GAAEJ,IAAK,WAArB;AACD,KAFD,MAEO,IACL,OAAOT,OAAP,KAAmB,QAAnB,IACAA,OAAO,KAAK,CAFP,EAGL;AACA,WAAK,MAAMW,KAAX,IAAoBP,MAAM,CAACJ,OAAD,CAAN,CAAgBc,KAAhB,CAAsB,GAAtB,CAApB,EAAgD;AAC9CF,QAAAA,OAAO,CAACC,IAAR,CAAc,WAAUF,KAAM,EAA9B;AACD;AACF;;AAED,WAAOC,OAAP;AACD,GAhB8B,CAA/B;AAkBA,SAAO;AAAEF,IAAAA;AAAF,GAAP;AACD","sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const classes: string[] = []\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof rounded === 'string' ||\n      rounded === 0\n    ) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n"],"file":"rounded.mjs"}