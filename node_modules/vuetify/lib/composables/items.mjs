// Utilities
import { computed } from 'vue';
import { getObjectValueByPath, getPropertyFromItem, propsFactory } from "../util/index.mjs"; // Types

// Composables
export const makeItemsProps = propsFactory({
  items: {
    type: Array,
    default: () => []
  },
  itemTitle: {
    type: [String, Array, Function],
    default: 'title'
  },
  itemValue: {
    type: [String, Array, Function],
    default: 'value'
  },
  itemChildren: {
    type: String,
    default: 'children'
  },
  itemProps: {
    type: Function,
    default: item => ({})
  }
}, 'item');
export function transformItem(props, item) {
  var _props$itemProps;

  const title = getPropertyFromItem(item, props.itemTitle, item);
  const value = getPropertyFromItem(item, props.itemValue, title);
  const children = getObjectValueByPath(item, props.itemChildren);
  return {
    title,
    value,
    children: Array.isArray(children) ? transformItems(props, children) : undefined,
    ...((_props$itemProps = props.itemProps) == null ? void 0 : _props$itemProps.call(props, item))
  };
}
export function transformItems(props, items) {
  const array = [];

  for (const item of items) {
    array.push(transformItem(props, item));
  }

  return array;
}
export function useItems(props) {
  const items = computed(() => transformItems(props, props.items));
  return {
    items
  };
}
//# sourceMappingURL=items.mjs.map