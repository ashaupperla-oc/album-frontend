import {
  makeTagProps
} from "./chunk-A5ZFPP7W.js";
import {
  createSimpleFunctional,
  defineComponent
} from "./chunk-5FFDOG6D.js";
import {
  capitalize,
  computed,
  createVNode,
  h
} from "./chunk-K4N6GQWC.js";
import {
  __spreadProps,
  __spreadValues,
  init_define_process_env
} from "./chunk-YCZKCQV3.js";

// dep:vuetify_lib_components_VGrid_index_mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VGrid/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VGrid/VContainer.mjs
init_define_process_env();
import "/Applications/XAMPP/xamppfiles/htdocs/seprojects/sreenith/album-frontend/node_modules/vuetify/lib/components/VGrid/VGrid.css";
var VContainer = defineComponent({
  name: "VContainer",
  props: __spreadValues({
    fluid: {
      type: Boolean,
      default: false
    }
  }, makeTagProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => createVNode(props.tag, {
      "class": ["v-container", {
        "v-container--fluid": props.fluid
      }]
    }, slots);
  }
});

// node_modules/vuetify/lib/components/VGrid/VCol.mjs
init_define_process_env();
import "/Applications/XAMPP/xamppfiles/htdocs/seprojects/sreenith/album-frontend/node_modules/vuetify/lib/components/VGrid/VGrid.css";
var breakpoints = ["sm", "md", "lg", "xl", "xxl"];
var breakpointProps = (() => {
  return breakpoints.reduce((props, val) => {
    props[val] = {
      type: [Boolean, String, Number],
      default: false
    };
    return props;
  }, {});
})();
var offsetProps = (() => {
  return breakpoints.reduce((props, val) => {
    props["offset" + capitalize(val)] = {
      type: [String, Number],
      default: null
    };
    return props;
  }, {});
})();
var orderProps = (() => {
  return breakpoints.reduce((props, val) => {
    props["order" + capitalize(val)] = {
      type: [String, Number],
      default: null
    };
    return props;
  }, {});
})();
var propMap = {
  col: Object.keys(breakpointProps),
  offset: Object.keys(offsetProps),
  order: Object.keys(orderProps)
};
function breakpointClass(type, prop, val) {
  let className = type;
  if (val == null || val === false) {
    return void 0;
  }
  if (prop) {
    const breakpoint = prop.replace(type, "");
    className += `-${breakpoint}`;
  }
  if (type === "col") {
    className = "v-" + className;
  }
  if (type === "col" && (val === "" || val === true)) {
    return className.toLowerCase();
  }
  className += `-${val}`;
  return className.toLowerCase();
}
var VCol = defineComponent({
  name: "VCol",
  props: __spreadValues(__spreadProps(__spreadValues(__spreadProps(__spreadValues(__spreadProps(__spreadValues({
    cols: {
      type: [Boolean, String, Number],
      default: false
    }
  }, breakpointProps), {
    offset: {
      type: [String, Number],
      default: null
    }
  }), offsetProps), {
    order: {
      type: [String, Number],
      default: null
    }
  }), orderProps), {
    alignSelf: {
      type: String,
      default: null,
      validator: (str) => ["auto", "start", "end", "center", "baseline", "stretch"].includes(str)
    }
  }), makeTagProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const classes = computed(() => {
      const classList = [];
      let type;
      for (type in propMap) {
        propMap[type].forEach((prop) => {
          const value = props[prop];
          const className = breakpointClass(type, prop, value);
          if (className)
            classList.push(className);
        });
      }
      const hasColClasses = classList.some((className) => className.startsWith("v-col-"));
      classList.push({
        "v-col": !hasColClasses || !props.cols,
        [`v-col-${props.cols}`]: props.cols,
        [`offset-${props.offset}`]: props.offset,
        [`order-${props.order}`]: props.order,
        [`align-self-${props.alignSelf}`]: props.alignSelf
      });
      return classList;
    });
    return () => {
      var _slots$default;
      return h(props.tag, {
        class: classes.value
      }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
    };
  }
});

// node_modules/vuetify/lib/components/VGrid/VRow.mjs
init_define_process_env();
import "/Applications/XAMPP/xamppfiles/htdocs/seprojects/sreenith/album-frontend/node_modules/vuetify/lib/components/VGrid/VGrid.css";
var breakpoints2 = ["sm", "md", "lg", "xl", "xxl"];
var ALIGNMENT = ["start", "end", "center"];
function makeRowProps(prefix, def) {
  return breakpoints2.reduce((props, val) => {
    props[prefix + capitalize(val)] = def();
    return props;
  }, {});
}
var alignValidator = (str) => [...ALIGNMENT, "baseline", "stretch"].includes(str);
var alignProps = makeRowProps("align", () => ({
  type: String,
  default: null,
  validator: alignValidator
}));
var justifyValidator = (str) => [...ALIGNMENT, "space-between", "space-around"].includes(str);
var justifyProps = makeRowProps("justify", () => ({
  type: String,
  default: null,
  validator: justifyValidator
}));
var alignContentValidator = (str) => [...ALIGNMENT, "space-between", "space-around", "stretch"].includes(str);
var alignContentProps = makeRowProps("alignContent", () => ({
  type: String,
  default: null,
  validator: alignContentValidator
}));
var propMap2 = {
  align: Object.keys(alignProps),
  justify: Object.keys(justifyProps),
  alignContent: Object.keys(alignContentProps)
};
var classMap = {
  align: "align",
  justify: "justify",
  alignContent: "align-content"
};
function breakpointClass2(type, prop, val) {
  let className = classMap[type];
  if (val == null) {
    return void 0;
  }
  if (prop) {
    const breakpoint = prop.replace(type, "");
    className += `-${breakpoint}`;
  }
  className += `-${val}`;
  return className.toLowerCase();
}
var VRow = defineComponent({
  name: "VRow",
  props: __spreadValues(__spreadValues(__spreadProps(__spreadValues(__spreadProps(__spreadValues({
    dense: Boolean,
    noGutters: Boolean,
    align: {
      type: String,
      default: null,
      validator: alignValidator
    }
  }, alignProps), {
    justify: {
      type: String,
      default: null,
      validator: justifyValidator
    }
  }), justifyProps), {
    alignContent: {
      type: String,
      default: null,
      validator: alignContentValidator
    }
  }), alignContentProps), makeTagProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const classes = computed(() => {
      const classList = [];
      let type;
      for (type in propMap2) {
        propMap2[type].forEach((prop) => {
          const value = props[prop];
          const className = breakpointClass2(type, prop, value);
          if (className)
            classList.push(className);
        });
      }
      classList.push({
        "v-row--no-gutters": props.noGutters,
        "v-row--dense": props.dense,
        [`align-${props.align}`]: props.align,
        [`justify-${props.justify}`]: props.justify,
        [`align-content-${props.alignContent}`]: props.alignContent
      });
      return classList;
    });
    return () => {
      var _slots$default;
      return h(props.tag, {
        class: ["v-row", classes.value]
      }, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots));
    };
  }
});

// node_modules/vuetify/lib/components/VGrid/VSpacer.mjs
init_define_process_env();
var VSpacer = createSimpleFunctional("flex-grow-1", "div", "VSpacer");
export {
  VCol,
  VContainer,
  VRow,
  VSpacer
};
//# sourceMappingURL=vuetify_lib_components_VGrid_index_mjs.js.map
