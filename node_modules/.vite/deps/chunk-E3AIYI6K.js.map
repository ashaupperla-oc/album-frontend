{
  "version": 3,
  "sources": ["../../vuetify/src/composables/form.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (\n    id: number | string,\n    validate: () => Promise<string[]>,\n    reset: () => void,\n    resetValidation: () => void,\n    isValid: Ref<boolean | null>,\n  ) => void\n  unregister: (id: number | string) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n  isValid: boolean | null\n}\n\ninterface FormValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\nexport interface SubmitEventPromise extends SubmitEvent, Promise<{ valid: boolean, errorMessages: FormValidationResult[] }> {}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errorMessages = ref<FormValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errorMessages.value = []\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errorMessages.value = results\n    isValidating.value = false\n\n    return { valid, errorMessages: errorMessages.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n    model.value = null\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errorMessages.value = []\n    model.value = null\n  }\n\n  watch(items, () => {\n    let valid = null\n\n    if (items.value.some(item => item.isValid === false)) {\n      valid = false\n    } else if (items.value.every(item => item.isValid === true)) {\n      valid = true\n    }\n\n    model.value = valid\n  }, {\n    deep: true,\n  })\n\n  provide(FormKey, {\n    register: (id, validate, reset, resetValidation, isValid) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        isValid: isValid as unknown as boolean | null, // TODO: Better way to type this unwrapping?\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errorMessages,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAsCO,IAAM,UAAqC,OAAO,IAAI,cAAX;AAW3C,IAAM,gBAAgB,aAAa;EACxC,UAAU;EACV,UAAU;EACV,gBAAgB;EAChB,UAAU;EACV,YAAY;IACV,MAAM;IACN,SAAS;EAFC;AAL4B,CAAD;AAWlC,oBAAqB,OAAkB;AAC5C,QAAM,QAAQ,gBAAgB,OAAO,YAAR;AAE7B,QAAM,aAAa,SAAS,MAAM,MAAM,QAAb;AAC3B,QAAM,aAAa,SAAS,MAAM,MAAM,QAAb;AAC3B,QAAM,eAAe,IAAI,KAAD;AACxB,QAAM,QAAQ,IAAiB,CAAA,CAAd;AACjB,QAAM,gBAAgB,IAA4B,CAAA,CAAzB;AAEzB,4BAA2B;AACzB,UAAM,UAAU,CAAA;AAChB,QAAI,QAAQ;AAEZ,kBAAc,QAAQ,CAAA;AACtB,iBAAa,QAAQ;AAErB,eAAW,QAAQ,MAAM,OAAO;AAC9B,YAAM,oBAAoB,MAAM,KAAK,SAAL;AAEhC,UAAI,kBAAkB,SAAS,GAAG;AAChC,gBAAQ;AAER,gBAAQ,KAAK;UACX,IAAI,KAAK;UACT,eAAe;QAFJ,CAAb;MAID;AAED,UAAI,CAAC,SAAS,MAAM;AAAU;IAC/B;AAED,kBAAc,QAAQ;AACtB,iBAAa,QAAQ;AAErB,WAAO;MAAE;MAAO,eAAe,cAAc;IAAtC;EACR;AAED,mBAAkB;AAChB,UAAM,MAAM,QAAQ,UAAQ,KAAK,MAAL,CAA5B;AACA,UAAM,QAAQ;EACf;AAED,6BAA4B;AAC1B,UAAM,MAAM,QAAQ,UAAQ,KAAK,gBAAL,CAA5B;AACA,kBAAc,QAAQ,CAAA;AACtB,UAAM,QAAQ;EACf;AAED,QAAM,OAAO,MAAM;AACjB,QAAI,QAAQ;AAEZ,QAAI,MAAM,MAAM,KAAK,UAAQ,KAAK,YAAY,KAA1C,GAAkD;AACpD,cAAQ;IACT,WAAU,MAAM,MAAM,MAAM,UAAQ,KAAK,YAAY,IAA3C,GAAkD;AAC3D,cAAQ;IACT;AAED,UAAM,QAAQ;EACf,GAAE;IACD,MAAM;EADL,CAVE;AAcL,UAAQ,SAAS;IACf,UAAU,CAAC,IAAI,WAAU,QAAO,kBAAiB,YAAY;AAC3D,UAAI,MAAM,MAAM,KAAK,UAAQ,KAAK,OAAO,EAArC,GAA0C;AAC5C,oBAAa,yBAAwB,KAA1B;MACZ;AAED,YAAM,MAAM,KAAK;QACf;QACA;QACA;QACA;QACA;MALe,CAAjB;IAOD;IACD,YAAY,QAAM;AAChB,YAAM,QAAQ,MAAM,MAAM,OAAO,UAAQ;AACvC,eAAO,KAAK,OAAO;MACpB,CAFa;IAGf;IACD;IACA;IACA;IACA;EAtBe,CAAV;AAyBP,SAAO;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EARK;AAUR;AAEM,mBAAoB;AACzB,SAAO,OAAO,SAAS,IAAV;AACd;",
  "names": []
}
