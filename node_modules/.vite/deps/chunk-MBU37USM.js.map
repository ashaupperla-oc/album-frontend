{
  "version": 3,
  "sources": ["../../vuetify/src/composables/theme.ts", "../../vuetify/src/util/color/APCA.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, inject, provide, ref, watch, watchEffect } from 'vue'\nimport {\n  colorToInt,\n  colorToRGB,\n  createRange,\n  darken,\n  getCurrentInstance,\n  getLuma,\n  IN_BROWSER,\n  intToHex,\n  lighten,\n  mergeDeep,\n  propsFactory,\n} from '@/util'\nimport { APCAcontrast } from '@/util/color/APCA'\n\n// Types\nimport type { App, InjectionKey, Ref } from 'vue'\nimport type { HeadClient } from '@vueuse/head'\n\ntype DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]> } : T\n\ninterface BaseColors {\n  background: string\n  surface: string\n  primary: string\n  secondary: string\n  success: string\n  warning: string\n  error: string\n  info: string\n}\n\ninterface OnColors {\n  'on-background': string\n  'on-surface': string\n  'on-primary': string\n  'on-secondary': string\n  'on-success': string\n  'on-warning': string\n  'on-error': string\n  'on-info': string\n}\n\nexport interface Colors extends BaseColors, OnColors {\n  [key: string]: string\n}\n\ninterface InternalThemeDefinition {\n  dark: boolean\n  colors: Colors\n  variables: Record<string, string | number>\n}\n\ninterface VariationsOptions {\n  colors: string[]\n  lighten: number\n  darken: number\n}\n\ninterface InternalThemeOptions {\n  isDisabled: boolean\n  defaultTheme: string\n  variations: VariationsOptions\n  themes: Record<string, InternalThemeDefinition>\n}\n\nexport type ThemeDefinition = DeepPartial<InternalThemeDefinition>\n\nexport type ThemeOptions = false | {\n  defaultTheme?: string\n  variations?: false | VariationsOptions\n  themes?: Record<string, ThemeDefinition>\n}\n\nexport interface ThemeInstance {\n  isDisabled: boolean\n  themes: Ref<Record<string, InternalThemeDefinition>>\n  current: Ref<string>\n  themeClasses: Ref<string | undefined>\n  setTheme: (key: string, theme: InternalThemeDefinition) => void\n  getTheme: (key: string) => InternalThemeDefinition\n  styles: Ref<string>\n}\n\nexport const ThemeSymbol: InjectionKey<ThemeInstance> = Symbol.for('vuetify:theme')\n\nexport const makeThemeProps = propsFactory({\n  theme: String,\n}, 'theme')\n\nconst defaultThemeOptions: ThemeOptions = {\n  defaultTheme: 'light',\n  variations: { colors: [], lighten: 0, darken: 0 },\n  themes: {\n    light: {\n      dark: false,\n      colors: {\n        background: '#FFFFFF',\n        surface: '#FFFFFF',\n        'surface-variant': '#424242',\n        'on-surface-variant': '#EEEEEE',\n        primary: '#6200EE',\n        'primary-darken-1': '#3700B3',\n        secondary: '#03DAC6',\n        'secondary-darken-1': '#018786',\n        error: '#B00020',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00',\n      },\n      variables: {\n        'border-color': '#000000',\n        'border-opacity': 0.12,\n        'high-emphasis-opacity': 0.87,\n        'medium-emphasis-opacity': 0.60,\n        'disabled-opacity': 0.38,\n        'idle-opacity': 0.04,\n        'hover-opacity': 0.04,\n        'focus-opacity': 0.12,\n        'selected-opacity': 0.08,\n        'activated-opacity': 0.12,\n        'pressed-opacity': 0.12,\n        'dragged-opacity': 0.08,\n        'kbd-background-color': '#212529',\n        'kbd-color': '#FFFFFF',\n        'code-background-color': '#C2C2C2',\n      },\n    },\n    dark: {\n      dark: true,\n      colors: {\n        background: '#121212',\n        surface: '#212121',\n        'surface-variant': '#BDBDBD',\n        'on-surface-variant': '#424242',\n        primary: '#BB86FC',\n        'primary-darken-1': '#3700B3',\n        secondary: '#03DAC5',\n        'secondary-darken-1': '#03DAC5',\n        error: '#CF6679',\n        info: '#2196F3',\n        success: '#4CAF50',\n        warning: '#FB8C00',\n      },\n      variables: {\n        'border-color': '#FFFFFF',\n        'border-opacity': 0.12,\n        'high-emphasis-opacity': 0.87,\n        'medium-emphasis-opacity': 0.60,\n        'disabled-opacity': 0.38,\n        'idle-opacity': 0.10,\n        'hover-opacity': 0.04,\n        'focus-opacity': 0.12,\n        'selected-opacity': 0.08,\n        'activated-opacity': 0.12,\n        'pressed-opacity': 0.16,\n        'dragged-opacity': 0.08,\n        'kbd-background-color': '#212529',\n        'kbd-color': '#FFFFFF',\n        'code-background-color': '#B7B7B7',\n      },\n    },\n  },\n}\n\nconst parseThemeOptions = (options: ThemeOptions = defaultThemeOptions): InternalThemeOptions => {\n  if (!options) return { ...defaultThemeOptions, isDisabled: true } as InternalThemeOptions\n\n  const themes = Object.entries(options.themes ?? {}).reduce((obj, [key, theme]) => {\n    const defaultTheme = theme.dark ? defaultThemeOptions.themes?.dark : defaultThemeOptions.themes?.light\n    obj[key] = mergeDeep(defaultTheme, theme)\n    return obj\n  }, {} as Record<string, ThemeDefinition>)\n\n  return mergeDeep(\n    defaultThemeOptions,\n    { ...options, themes },\n  ) as InternalThemeOptions\n}\n\n// Composables\nexport function createTheme (app: App, options?: ThemeOptions): ThemeInstance {\n  const head = app._context.provides.usehead as HeadClient | undefined\n  const parsedOptions = parseThemeOptions(options)\n  const styleEl = ref<HTMLStyleElement>()\n  const current = ref(parsedOptions.defaultTheme)\n  const themes = ref(parsedOptions.themes)\n  const variations = ref(parsedOptions.variations)\n\n  const computedThemes = computed(() => {\n    return Object.entries(themes.value).reduce((obj, [name, original]) => {\n      const theme: InternalThemeDefinition = {\n        ...original,\n        colors: {\n          ...original.colors,\n          ...(parsedOptions.variations.colors ?? []).reduce((obj, color) => {\n            return { ...obj, ...genColorVariations(color, original.colors[color]!) }\n          }, {}),\n        },\n      }\n\n      for (const color of Object.keys(theme.colors)) {\n        if (/on-[a-z]/.test(color) || theme.colors[`on-${color}`]) continue\n\n        const onColor = `on-${color}` as keyof OnColors\n        const colorVal = colorToInt(theme.colors[color]!)\n\n        const blackContrast = Math.abs(APCAcontrast(0, colorVal))\n        const whiteContrast = Math.abs(APCAcontrast(0xffffff, colorVal))\n\n        // TODO: warn about poor color selections\n        // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n        // const minContrast = Math.max(blackContrast, whiteContrast)\n        // if (minContrast < 60) {\n        //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n        // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n        //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n        // }\n\n        // Prefer white text if both have an acceptable contrast ratio\n        theme.colors[onColor] = whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000'\n      }\n\n      obj[name] = theme\n\n      return obj\n    }, {} as Record<string, InternalThemeDefinition>)\n  })\n\n  function genColorVariations (name: string, color: string) {\n    const obj: Record<string, string> = {}\n    for (const variation of (['lighten', 'darken'] as const)) {\n      const fn = variation === 'lighten' ? lighten : darken\n      for (const amount of createRange(variations.value[variation], 1)) {\n        obj[`${name}-${variation}-${amount}`] = intToHex(fn(colorToInt(color), amount))\n      }\n    }\n\n    return obj\n  }\n\n  const styles = computed(() => {\n    const lines = []\n\n    for (const themeName of Object.keys(computedThemes.value)) {\n      const variables = computedThemes.value[themeName].variables\n\n      lines.push(...createCssClass(`.v-theme--${themeName}`, [\n        ...genCssVariables(themeName),\n        ...Object.keys(variables).map(key => {\n          const value = variables[key]\n          const color = typeof value === 'string' && value.startsWith('#') ? colorToRGB(value) : undefined\n          const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined\n\n          return `--v-${key}: ${rgb ?? value}`\n        }),\n      ]))\n    }\n\n    const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)))\n    for (const key of colors) {\n      if (/on-[a-z]/.test(key)) {\n        lines.push(...createCssClass(`.${key}`, [`color: rgb(var(--v-theme-${key})) !important`]))\n      } else {\n        lines.push(\n          ...createCssClass(`.bg-${key}`, [\n            `--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`,\n            `background: rgb(var(--v-theme-${key})) !important`,\n            `color: rgb(var(--v-theme-on-${key})) !important`,\n          ]),\n          ...createCssClass(`.text-${key}`, [`color: rgb(var(--v-theme-${key})) !important`]),\n          ...createCssClass(`.border-${key}`, [`--v-border-color: var(--v-theme-${key})`]),\n        )\n      }\n    }\n\n    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('')\n  })\n\n  function genCssVariables (name: string) {\n    const theme = computedThemes.value[name]\n\n    if (!theme) throw new Error(`Could not find theme ${name}`)\n\n    const lightOverlay = theme.dark ? 2 : 1\n    const darkOverlay = theme.dark ? 1 : 2\n\n    const variables: string[] = []\n    for (const [key, value] of Object.entries(theme.colors)) {\n      const rgb = colorToRGB(value!)\n      variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`)\n      if (!key.startsWith('on-')) {\n        variables.push(`--v-theme-${key}-overlay-multiplier: ${getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`)\n      }\n    }\n\n    return variables\n  }\n\n  function createCssClass (selector: string, content: string[]) {\n    return [\n      `${selector} {\\n`,\n      ...content.map(line => `  ${line};\\n`),\n      '}\\n',\n    ]\n  }\n\n  if (head) {\n    head.addHeadObjs(computed(() => ({\n      style: [{\n        children: styles.value,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n      }],\n    })))\n\n    if (IN_BROWSER) {\n      watchEffect(() => head.updateDOM())\n    }\n  } else {\n    watch(themes, updateStyles, { deep: true, immediate: true })\n\n    function updateStyles () {\n      if (parsedOptions.isDisabled) return\n\n      genStyleElement()\n\n      if (styleEl.value) styleEl.value.innerHTML = styles.value\n    }\n\n    function genStyleElement () {\n      if (typeof document === 'undefined' || styleEl.value) return\n\n      const el = document.createElement('style')\n      el.type = 'text/css'\n      el.id = 'vuetify-theme-stylesheet'\n\n      styleEl.value = el\n      document.head.appendChild(styleEl.value)\n    }\n  }\n\n  return {\n    isDisabled: parsedOptions.isDisabled,\n    themes: computedThemes,\n    setTheme: (key: string, theme: InternalThemeDefinition) => themes.value[key] = theme,\n    getTheme: (key: string) => computedThemes.value[key],\n    current,\n    themeClasses: computed(() => parsedOptions.isDisabled ? undefined : `v-theme--${current.value}`),\n    styles,\n  }\n}\n\nexport function provideTheme (props: { theme?: string }) {\n  getCurrentInstance('provideTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  const current = computed<string>(() => {\n    return props.theme ?? theme?.current.value\n  })\n\n  const themeClasses = computed(() => theme.isDisabled ? undefined : `v-theme--${current.value}`)\n\n  const newTheme: ThemeInstance = {\n    ...theme,\n    current,\n    themeClasses,\n  }\n\n  provide(ThemeSymbol, newTheme)\n\n  return newTheme\n}\n\nexport function useTheme () {\n  getCurrentInstance('useTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  return theme\n}\n", "/**\n * WCAG 3.0 APCA perceptual contrast algorithm from https://github.com/Myndex/SAPC-APCA\n * @licence https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n * @see https://www.w3.org/WAI/GL/task-forces/silver/wiki/Visual_Contrast_of_Text_Subgroup\n */\n\n// MAGICAL NUMBERS\n\n// sRGB Conversion to Relative Luminance (Y)\n\n// Transfer Curve (aka \"Gamma\") for sRGB linearization\n// Simple power curve vs piecewise described in docs\n// Essentially, 2.4 best models actual display\n// characteristics in combination with the total method\nconst mainTRC = 2.4\n\nconst Rco = 0.2126729 // sRGB Red Coefficient (from matrix)\nconst Gco = 0.7151522 // sRGB Green Coefficient (from matrix)\nconst Bco = 0.0721750 // sRGB Blue Coefficient (from matrix)\n\n// For Finding Raw SAPC Contrast from Relative Luminance (Y)\n\n// Constants for SAPC Power Curve Exponents\n// One pair for normal text, and one for reverse\n// These are the \"beating heart\" of SAPC\nconst normBG = 0.55\nconst normTXT = 0.58\nconst revTXT = 0.57\nconst revBG = 0.62\n\n// For Clamping and Scaling Values\n\nconst blkThrs = 0.03 // Level that triggers the soft black clamp\nconst blkClmp = 1.45 // Exponent for the soft black clamp curve\nconst deltaYmin = 0.0005 // Lint trap\nconst scaleBoW = 1.25 // Scaling for dark text on light\nconst scaleWoB = 1.25 // Scaling for light text on dark\nconst loConThresh = 0.078 // Threshold for new simple offset scale\nconst loConFactor = 12.82051282051282 // = 1/0.078,\nconst loConOffset = 0.06 // The simple offset\nconst loClip = 0.001 // Output clip (lint trap #2)\n\nexport function APCAcontrast (text: number, background: number) {\n  // Linearize sRGB\n  const Rtxt = ((text >> 16 & 0xff) / 255) ** mainTRC\n  const Gtxt = ((text >> 8 & 0xff) / 255) ** mainTRC\n  const Btxt = ((text >> 0 & 0xff) / 255) ** mainTRC\n\n  const Rbg = ((background >> 16 & 0xff) / 255) ** mainTRC\n  const Gbg = ((background >> 8 & 0xff) / 255) ** mainTRC\n  const Bbg = ((background >> 0 & 0xff) / 255) ** mainTRC\n\n  // Apply the standard coefficients and sum to Y\n  let Ytxt = (Rtxt * Rco) + (Gtxt * Gco) + (Btxt * Bco)\n  let Ybg = (Rbg * Rco) + (Gbg * Gco) + (Bbg * Bco)\n\n  // Soft clamp Y when near black.\n  // Now clamping all colors to prevent crossover errors\n  if (Ytxt <= blkThrs) Ytxt += (blkThrs - Ytxt) ** blkClmp\n  if (Ybg <= blkThrs) Ybg += (blkThrs - Ybg) ** blkClmp\n\n  // Return 0 Early for extremely low \u2206Y (lint trap #1)\n  if (Math.abs(Ybg - Ytxt) < deltaYmin) return 0.0\n\n  // SAPC CONTRAST\n\n  let outputContrast: number // For weighted final values\n  if (Ybg > Ytxt) {\n    // For normal polarity, black text on white\n    // Calculate the SAPC contrast value and scale\n\n    const SAPC = ((Ybg ** normBG) - (Ytxt ** normTXT)) * scaleBoW\n\n    // NEW! SAPC SmoothScale\u2122\n    // Low Contrast Smooth Scale Rollout to prevent polarity reversal\n    // and also a low clip for very low contrasts (lint trap #2)\n    // much of this is for very low contrasts, less than 10\n    // therefore for most reversing needs, only loConOffset is important\n    outputContrast =\n      (SAPC < loClip) ? 0.0\n      : (SAPC < loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC - loConOffset\n  } else {\n    // For reverse polarity, light text on dark\n    // WoB should always return negative value.\n\n    const SAPC = ((Ybg ** revBG) - (Ytxt ** revTXT)) * scaleWoB\n\n    outputContrast =\n      (SAPC > -loClip) ? 0.0\n      : (SAPC > -loConThresh) ? SAPC - SAPC * loConFactor * loConOffset\n      : SAPC + loConOffset\n  }\n\n  return outputContrast * 100\n}\n"],
  "mappings": "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",
  "names": []
}
