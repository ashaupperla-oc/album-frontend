import {
  useColor
} from "./chunk-2BT4OQOS.js";
import {
  getCurrentInstanceName,
  propsFactory
} from "./chunk-MS7HNLEN.js";
import {
  Fragment,
  computed,
  createVNode,
  isRef,
  unref
} from "./chunk-WAZIWP6A.js";
import {
  init_define_process_env
} from "./chunk-YCZKCQV3.js";

// node_modules/vuetify/lib/composables/border.mjs
init_define_process_env();
var makeBorderProps = propsFactory({
  border: [Boolean, Number, String]
}, "border");
function useBorder(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const borderClasses = computed(() => {
    const classes = [];
    if (props.border != null && props.border !== false) {
      classes.push(`${name}--border`);
    }
    if (typeof props.border === "string" && props.border !== "" || props.border === 0) {
      for (const value of String(props.border).split(" ")) {
        classes.push(`border-${value}`);
      }
    }
    return classes;
  });
  return {
    borderClasses
  };
}

// node_modules/vuetify/lib/composables/elevation.mjs
init_define_process_env();
var makeElevationProps = propsFactory({
  elevation: {
    type: [Number, String],
    validator(v) {
      const value = parseInt(v);
      return !isNaN(value) && value >= 0 && value <= 24;
    }
  }
}, "elevation");
function useElevation(props) {
  const elevationClasses = computed(() => {
    const elevation = isRef(props) ? props.value : props.elevation;
    const classes = [];
    if (elevation == null)
      return classes;
    classes.push(`elevation-${elevation}`);
    return classes;
  });
  return {
    elevationClasses
  };
}

// node_modules/vuetify/lib/composables/variant.mjs
init_define_process_env();
var allowedVariants = ["outlined", "plain", "text", "contained", "contained-flat", "contained-text"];
function genOverlays(isClickable, name) {
  return createVNode(Fragment, null, [isClickable && createVNode("div", {
    "class": `${name}__overlay`
  }, null), createVNode("div", {
    "class": `${name}__underlay`
  }, null)]);
}
var makeVariantProps = propsFactory({
  color: String,
  variant: {
    type: String,
    default: "contained",
    validator: (v) => allowedVariants.includes(v)
  }
}, "variant");
function useVariant(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const variantClasses = computed(() => {
    const {
      variant
    } = unref(props);
    return `${name}--variant-${variant}`;
  });
  const {
    colorClasses,
    colorStyles
  } = useColor(computed(() => {
    const {
      variant,
      color
    } = unref(props);
    return {
      [["contained", "contained-flat"].includes(variant) ? "background" : "text"]: color
    };
  }));
  return {
    colorClasses,
    colorStyles,
    variantClasses
  };
}

export {
  makeBorderProps,
  useBorder,
  makeElevationProps,
  useElevation,
  genOverlays,
  makeVariantProps,
  useVariant
};
//# sourceMappingURL=chunk-FVJLEDIB.js.map
