import {
  SUPPORTS_INTERSECTION,
  propsFactory
} from "./chunk-MS7HNLEN.js";
import {
  Transition,
  h,
  mergeProps
} from "./chunk-WAZIWP6A.js";
import {
  __objRest,
  init_define_process_env
} from "./chunk-YCZKCQV3.js";

// node_modules/vuetify/lib/directives/intersect/index.mjs
init_define_process_env();
function mounted(el, binding) {
  if (!SUPPORTS_INTERSECTION)
    return;
  const modifiers = binding.modifiers || {};
  const value = binding.value;
  const {
    handler,
    options
  } = typeof value === "object" ? value : {
    handler: value,
    options: {}
  };
  const observer = new IntersectionObserver(function() {
    var _el$_observe;
    let entries = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    let observer2 = arguments.length > 1 ? arguments[1] : void 0;
    const _observe = (_el$_observe = el._observe) == null ? void 0 : _el$_observe[binding.instance.$.uid];
    if (!_observe)
      return;
    const isIntersecting = entries.some((entry) => entry.isIntersecting);
    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {
      handler(isIntersecting, entries, observer2);
    }
    if (isIntersecting && modifiers.once)
      unmounted(el, binding);
    else
      _observe.init = true;
  }, options);
  el._observe = Object(el._observe);
  el._observe[binding.instance.$.uid] = {
    init: false,
    observer
  };
  observer.observe(el);
}
function unmounted(el, binding) {
  var _el$_observe2;
  const observe = (_el$_observe2 = el._observe) == null ? void 0 : _el$_observe2[binding.instance.$.uid];
  if (!observe)
    return;
  observe.observer.unobserve(el);
  delete el._observe[binding.instance.$.uid];
}
var Intersect = {
  mounted,
  unmounted
};
var intersect_default = Intersect;

// node_modules/vuetify/lib/composables/transition.mjs
init_define_process_env();
var makeTransitionProps = propsFactory({
  transition: {
    type: [Boolean, String, Object],
    default: "fade-transition",
    validator: (val) => val !== true
  }
}, "transition");
var MaybeTransition = (props, _ref) => {
  var _slots$default;
  let {
    slots
  } = _ref;
  const _a = props, {
    transition
  } = _a, rest = __objRest(_a, [
    "transition"
  ]);
  if (!transition || typeof transition === "boolean")
    return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
  const _b = typeof transition === "object" ? transition : {}, {
    component = Transition
  } = _b, customProps = __objRest(_b, [
    "component"
  ]);
  return h(component, mergeProps(typeof transition === "string" ? {
    name: transition
  } : customProps, rest), slots);
};

export {
  intersect_default,
  makeTransitionProps,
  MaybeTransition
};
//# sourceMappingURL=chunk-IYGNZFGZ.js.map
