import {
  useProxiedModel
} from "./chunk-XAL2DXS4.js";
import {
  consoleWarn,
  propsFactory
} from "./chunk-5FFDOG6D.js";
import {
  computed,
  inject,
  provide,
  ref,
  watch
} from "./chunk-K4N6GQWC.js";
import {
  init_define_process_env
} from "./chunk-YCZKCQV3.js";

// node_modules/vuetify/lib/composables/form.mjs
init_define_process_env();
var FormKey = Symbol.for("vuetify:form");
var makeFormProps = propsFactory({
  disabled: Boolean,
  fastFail: Boolean,
  lazyValidation: Boolean,
  readonly: Boolean,
  modelValue: {
    type: Boolean,
    default: null
  }
});
function createForm(props) {
  const model = useProxiedModel(props, "modelValue");
  const isDisabled = computed(() => props.disabled);
  const isReadonly = computed(() => props.readonly);
  const isValidating = ref(false);
  const items = ref([]);
  const errorMessages = ref([]);
  async function validate() {
    const results = [];
    let valid = true;
    errorMessages.value = [];
    isValidating.value = true;
    for (const item of items.value) {
      const itemErrorMessages = await item.validate();
      if (itemErrorMessages.length > 0) {
        valid = false;
        results.push({
          id: item.id,
          errorMessages: itemErrorMessages
        });
      }
      if (!valid && props.fastFail)
        break;
    }
    errorMessages.value = results;
    isValidating.value = false;
    return {
      valid,
      errorMessages: errorMessages.value
    };
  }
  function reset() {
    items.value.forEach((item) => item.reset());
    model.value = null;
  }
  function resetValidation() {
    items.value.forEach((item) => item.resetValidation());
    errorMessages.value = [];
    model.value = null;
  }
  watch(items, () => {
    let valid = null;
    if (items.value.some((item) => item.isValid === false)) {
      valid = false;
    } else if (items.value.every((item) => item.isValid === true)) {
      valid = true;
    }
    model.value = valid;
  }, {
    deep: true
  });
  provide(FormKey, {
    register: (id, validate2, reset2, resetValidation2, isValid) => {
      if (items.value.some((item) => item.id === id)) {
        consoleWarn(`Duplicate input name "${id}"`);
      }
      items.value.push({
        id,
        validate: validate2,
        reset: reset2,
        resetValidation: resetValidation2,
        isValid
      });
    },
    unregister: (id) => {
      items.value = items.value.filter((item) => {
        return item.id !== id;
      });
    },
    isDisabled,
    isReadonly,
    isValidating,
    items
  });
  return {
    errorMessages,
    isDisabled,
    isReadonly,
    isValidating,
    items,
    validate,
    reset,
    resetValidation
  };
}
function useForm() {
  return inject(FormKey, null);
}

export {
  makeFormProps,
  createForm,
  useForm
};
//# sourceMappingURL=chunk-E3AIYI6K.js.map
