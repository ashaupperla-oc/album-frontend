{
  "version": 3,
  "sources": ["../../vuetify/src/composables/border.ts", "../../vuetify/src/composables/elevation.ts", "../../vuetify/src/composables/variant.tsx"],
  "sourcesContent": ["// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface BorderProps {\n  border?: boolean | number | string\n}\n\n// Composables\nexport const makeBorderProps = propsFactory({\n  border: [Boolean, Number, String],\n}, 'border')\n\nexport function useBorder (\n  props: BorderProps,\n  name = getCurrentInstanceName(),\n) {\n  const borderClasses = computed(() => {\n    const classes: string[] = []\n\n    if (props.border != null && props.border !== false) {\n      classes.push(`${name}--border`)\n    }\n\n    if (\n      (typeof props.border === 'string' && props.border !== '') ||\n      props.border === 0\n    ) {\n      for (const value of String(props.border).split(' ')) {\n        classes.push(`border-${value}`)\n      }\n    }\n\n    return classes\n  })\n\n  return { borderClasses }\n}\n", "// Utilities\nimport { computed, isRef } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nexport interface ElevationProps {\n  elevation?: number | string | null\n}\n\n// Composables\nexport const makeElevationProps = propsFactory({\n  elevation: {\n    type: [Number, String],\n    validator (v: any) {\n      const value = parseInt(v)\n\n      return (\n        !isNaN(value) &&\n        value >= 0 &&\n        // Material Design has a maximum elevation of 24\n        // https://material.io/design/environment/elevation.html#default-elevations\n        value <= 24\n      )\n    },\n  },\n}, 'elevation')\n\ntype ElevationData = {\n  elevationClasses: Ref<string[]>\n}\n\nexport function useElevation (props: ElevationProps | Ref<number | string | undefined>): ElevationData {\n  const elevationClasses = computed(() => {\n    const elevation = isRef(props) ? props.value : props.elevation\n    const classes: string[] = []\n\n    if (elevation == null) return classes\n\n    classes.push(`elevation-${elevation}`)\n\n    return classes\n  })\n\n  return { elevationClasses }\n}\n", "// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'outlined',\n  'plain',\n  'text',\n  'contained',\n  'contained-flat',\n  'contained-text',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <div class={`${name}__overlay`} /> }\n\n      <div class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'contained',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['contained', 'contained-flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAUO,IAAM,kBAAkB,aAAa;EAC1C,QAAQ,CAAC,SAAS,QAAQ,MAAlB;AADkC,GAEzC,QAFwC;AAIpC,mBACL,OAEA;AAAA,MADA,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADO,uBAAsB;AAE7B,QAAM,gBAAgB,SAAS,MAAM;AACnC,UAAM,UAAoB,CAAA;AAE1B,QAAI,MAAM,UAAU,QAAQ,MAAM,WAAW,OAAO;AAClD,cAAQ,KAAM,GAAE,cAAhB;IACD;AAED,QACG,OAAO,MAAM,WAAW,YAAY,MAAM,WAAW,MACtD,MAAM,WAAW,GACjB;AACA,iBAAW,SAAS,OAAO,MAAM,MAAP,EAAe,MAAM,GAA3B,GAAiC;AACnD,gBAAQ,KAAM,UAAS,OAAvB;MACD;IACF;AAED,WAAO;EACR,CAjB6B;AAmB9B,SAAO;IAAE;EAAF;AACR;;;ACtCD;AAWO,IAAM,qBAAqB,aAAa;EAC7C,WAAW;IACT,MAAM,CAAC,QAAQ,MAAT;IACN,UAAW,GAAQ;AACjB,YAAM,QAAQ,SAAS,CAAD;AAEtB,aACE,CAAC,MAAM,KAAD,KACN,SAAS,KAGT,SAAS;IAEZ;EAZQ;AADkC,GAe5C,WAf2C;AAqBvC,sBAAuB,OAAyE;AACrG,QAAM,mBAAmB,SAAS,MAAM;AACtC,UAAM,YAAY,MAAM,KAAD,IAAU,MAAM,QAAQ,MAAM;AACrD,UAAM,UAAoB,CAAA;AAE1B,QAAI,aAAa;AAAM,aAAO;AAE9B,YAAQ,KAAM,aAAY,WAA1B;AAEA,WAAO;EACR,CATgC;AAWjC,SAAO;IAAE;EAAF;AACR;;;;AClCM,IAAM,kBAAkB,CAC7B,YACA,SACA,QACA,aACA,kBACA,gBAN6B;AAgBxB,qBAAsB,aAAsB,MAAc;AAC/D,SAAA,YAAA,UAAA,MAAA,CAEM,eAAW,YAAA,OAAA;IAAA,SAAiB,GAAE;EAAnB,GAAA,IAAA,GAFjB,YAAA,OAAA;IAAA,SAIiB,GAAE;EAJnB,GAAA,IAAA,CAAA,CAAA;AAOD;AAEM,IAAM,mBAAmB,aAAa;EAC3C,OAAO;EACP,SAAS;IACP,MAAM;IACN,SAAS;IACT,WAAY,OAAW,gBAAgB,SAAS,CAAzB;EAHhB;AAFkC,GAO1C,SAPyC;AASrC,oBACL,OAEA;AAAA,MADA,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADO,uBAAsB;AAE7B,QAAM,iBAAiB,SAAS,MAAM;AACpC,UAAM;MAAE;QAAY,MAAM,KAAD;AACzB,WAAQ,GAAE,iBAAiB;EAC5B,CAH8B;AAK/B,QAAM;IAAE;IAAc;MAAgB,SAAS,SAAS,MAAM;AAC5D,UAAM;MAAE;MAAS;QAAU,MAAM,KAAD;AAChC,WAAO;MACL,CAAC,CAAC,aAAa,gBAAd,EAAgC,SAAS,OAAzC,IAAoD,eAAe,SAAS;IADxE;EAGR,CALsD,CAAT;AAO9C,SAAO;IAAE;IAAc;IAAa;EAA7B;AACR;",
  "names": []
}
